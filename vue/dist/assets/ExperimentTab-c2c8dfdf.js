import{u as Ce,_ as se,r as H,o as N,c as P,a as D,n as ae,t as X,w as ue,v as ce,b as Q,d as G,e as ge,f as I,g as oe,h as ee,F as de,i as me,j as ie,l as c,k as F,m as pe,p as Ve,q as U,s as A,x as ke,y as De,z as Se,A as Te,B as $e,C as ve}from"./index-6db60074.js";/* empty css              */import{u as Ee}from"./device-8da93b28.js";import{T as Ne,V as Me}from"./VialPlot-55ea09d6.js";const Le="/assets/bottle_mask-3f9b6cbf.png",Pe="/assets/bottle-e2f639bd.png";const he={name:"BottleSingle",props:{totalVolume:{type:Number,required:!0},currentVolume:{type:Number,required:!0},bottleName:{type:String,required:!0,validator:t=>["main","drug","waste"].includes(t)},icon:{type:String,default:""},liquidColor:{type:String,default:"rgba(255, 215, 0, 0.6)"},concentration:{type:Number,default:null},units:{type:String,default:"units"}},data(){return{maskImage:new Image,maskLoaded:!1,maskData:null,editing:{total:!1,current:!1,concentration:!1,units:!1},editingValue:0,bottleNaturalWidth:0,bottleNaturalHeight:0,canvasWidth:150,canvasHeight:0,updateTimeout:null,isUpdating:!1}},computed:{safeCurrentVolume(){return typeof this.currentVolume=="number"&&!isNaN(this.currentVolume)?this.currentVolume.toFixed(1):"---"},showConcentration(){return this.bottleName==="drug"&&this.concentration!==null&&this.bottleName!=="waste"},bottleScale(){const t=Math.min(Math.max(this.totalVolume,100),5e3);return Math.max(Math.pow(t/1e3,1/3),.5)},bottleNameStyle(){return{transform:`translateX(-50%) scale(${1/this.bottleScale})`,fontSize:`${1.2*this.bottleScale}rem`}},fillPercentage(){const t=this.totalVolume*1.21;return Math.min(this.currentVolume/t*100,100)},bottleImgStyle(){const t=this.$refs.bottleImg,e=(t==null?void 0:t.naturalWidth)||100,v=(t==null?void 0:t.naturalHeight)||200,{drawW:m,drawH:y,offsetX:d,offsetY:T}=this.getImageDrawParams(e,v);return{width:m+"px",height:y+"px",left:d+"px",top:T+"px",position:"absolute",background:"transparent",zIndex:1,transition:"filter 0.3s",display:"block",objectFit:"fill"}},bottleContainerStyle(){const t=this.bottleNaturalWidth/this.bottleNaturalHeight,e=150,v=e/t;return{width:e+"px",height:v+"px"}}},methods:{getImageDrawParams(t,e){const v=this.canvasWidth,m=this.canvasHeight,y=Math.min(v/t,m/e),d=t*y,T=e*y,a=(v-d)/2,b=(m-T)/2;return{drawW:d,drawH:T,offsetX:a,offsetY:b,scale:y}},updateLiquid(){if(!this.maskLoaded||!this.maskData)return;const t=this.$refs.liquidCanvas,e=t.getContext("2d");this.getImageDrawParams(this.maskImage.width,this.maskImage.height),e.clearRect(0,0,t.width,t.height);let v=t.height,m=0;for(let a=0;a<t.height;a++)for(let b=0;b<t.width;b++){const x=(a*t.width+b)*4;this.maskData[x]<20&&this.maskData[x+1]<20&&this.maskData[x+2]<20&&this.maskData[x+3]===255&&(v=Math.min(v,a),m=Math.max(m,a))}const y=m-v,d=this.fillPercentage/100*y,T=m-d;for(let a=0;a<t.height;a++)for(let b=0;b<t.width;b++){const x=(a*t.width+b)*4,_=this.maskData[x]<20&&this.maskData[x+1]<20&&this.maskData[x+2]<20&&this.maskData[x+3]===255;a>=T&&_&&(e.fillStyle=this.liquidColor,e.fillRect(b,a,1,1))}},startEditing(t){console.log(`[BottleSingle] Starting edit for field: ${t}`),console.log(`[BottleSingle] Current props - totalVolume: ${this.totalVolume}, currentVolume: ${this.currentVolume}`),this.editing[t]=!0,t==="total"||t==="current"||t==="concentration"?this.editingValue=Number(Number(t==="total"?this.totalVolume:t==="current"?this.currentVolume:this.concentration).toFixed(4)):this.editingValue=t==="units"?this.units:0,console.log(`[BottleSingle] Set editingValue to: ${this.editingValue}`),this.$nextTick(()=>{this.$refs.volumeInput.focus()})},handleInput(t){console.log(`[BottleSingle] Handle input for field: ${t}, value: ${this.editingValue}`),this.updateTimeout&&clearTimeout(this.updateTimeout),t!=="units"&&(this.editingValue=Number(this.editingValue)),console.log(`[BottleSingle] Processed editingValue: ${this.editingValue}`)},finishEditing(t){if(console.log(`[BottleSingle] Finishing edit for field: ${t}`),console.log(`[BottleSingle] Final editingValue: ${this.editingValue}, isUpdating: ${this.isUpdating}`),!this.isUpdating){if(this.isUpdating=!0,t==="units"||this.editingValue>=0){const e=t==="total"?this.totalVolume:t==="current"?this.currentVolume:t==="concentration"?this.concentration:this.units,v="update:"+(t==="total"?"totalVolume":t==="current"?"currentVolume":t==="concentration"?"concentration":"units");console.log(`[BottleSingle] Emitting ${v} with value: ${this.editingValue} (old value: ${e})`),this.$emit(v,this.editingValue)}else console.log(`[BottleSingle] Skipping emit - invalid value: ${this.editingValue}`);this.editing[t]=!1,setTimeout(()=>{this.isUpdating=!1},100)}},cancelEditing(){console.log("[BottleSingle] Canceling edit"),this.updateTimeout&&clearTimeout(this.updateTimeout),this.editing.total=!1,this.editing.current=!1,this.editing.concentration=!1,this.editing.units=!1}},watch:{fillPercentage(){this.updateLiquid()}},mounted(){this.maskImage.src=Le,this.maskImage.onload=()=>{const v=this.$refs.maskCanvas.getContext("2d"),m=this.maskImage.width,y=this.maskImage.height,{drawW:d,drawH:T,offsetX:a,offsetY:b,scale:x}=this.getImageDrawParams(m,y);v.clearRect(0,0,this.canvasWidth,this.canvasHeight),v.drawImage(this.maskImage,a,b,d,T),this.maskData=v.getImageData(0,0,this.canvasWidth,this.canvasHeight).data,this.maskLoaded=!0,this.updateLiquid()};const t=this.$refs.bottleImg;t&&(t.onload=()=>{this.bottleNaturalWidth=t.naturalWidth,this.bottleNaturalHeight=t.naturalHeight;const e=this.bottleNaturalHeight/this.bottleNaturalWidth;this.canvasWidth=150,this.canvasHeight=Math.round(this.canvasWidth*e)})},beforeUnmount(){window.removeEventListener("resize",this.updateCanvasSize)}},be=()=>{Ce(t=>({"6fb49ebd":t.canvasWidth+"px","5d30d4e0":t.canvasHeight+"px",ac6b28b4:t.bottleScale}))},xe=he.setup;he.setup=xe?(t,e)=>(be(),xe(t,e)):be;const Fe={class:"bottle-container"},Oe={class:"bottle"},Ie={class:"bottle-content"},Be=["width","height"],Ue=["width","height"],ze={class:"volume-display"},We=["title"],He={key:4,class:"concentration-container"},Ae={class:"bottle-name"};function Re(t,e,v,m,y,d){const T=H("v-icon");return N(),P("div",Fe,[D("div",Oe,[D("div",Ie,[D("img",{src:Pe,alt:"Bottle",class:"bottle-image",style:ae(d.bottleImgStyle),ref:"bottleImg"},null,4),D("canvas",{ref:"maskCanvas",class:"mask-canvas",width:y.canvasWidth,height:y.canvasHeight},null,8,Be),D("canvas",{ref:"liquidCanvas",class:"liquid-canvas",width:y.canvasWidth,height:y.canvasHeight},null,8,Ue)]),D("div",ze,[y.editing.total?ue((N(),P("input",{key:1,type:"number","onUpdate:modelValue":e[1]||(e[1]=a=>y.editingValue=a),onBlur:e[2]||(e[2]=a=>d.finishEditing("total")),onKeyup:[e[3]||(e[3]=Q(a=>d.finishEditing("total"),["enter"])),e[4]||(e[4]=Q((...a)=>d.cancelEditing&&d.cancelEditing(...a),["esc"]))],ref:"volumeInput",class:"volume-input","data-type":"total",title:"Max Volume"},null,544)),[[ce,y.editingValue,void 0,{number:!0}]]):(N(),P("div",{key:0,class:"total-volume",onDblclick:e[0]||(e[0]=a=>d.startEditing("total")),title:"Max Volume"},X(v.totalVolume)+"ml ",33)),y.editing.current?ue((N(),P("input",{key:3,type:"number","onUpdate:modelValue":e[6]||(e[6]=a=>y.editingValue=a),onBlur:e[7]||(e[7]=a=>d.finishEditing("current")),onKeyup:[e[8]||(e[8]=Q(a=>d.finishEditing("current"),["enter"])),e[9]||(e[9]=Q((...a)=>d.cancelEditing&&d.cancelEditing(...a),["esc"]))],ref:"volumeInput",class:"volume-input","data-type":"current",title:"Current Volume"},null,544)),[[ce,y.editingValue,void 0,{number:!0}]]):(N(),P("div",{key:2,class:"current-volume",onDblclick:e[5]||(e[5]=a=>d.startEditing("current")),title:`Current Volume: ${d.safeCurrentVolume}ml`},X(d.safeCurrentVolume)+"ml ",41,We)),d.showConcentration?(N(),P("div",He,[y.editing.concentration?ue((N(),P("input",{key:1,type:"number","onUpdate:modelValue":e[11]||(e[11]=a=>y.editingValue=a),onBlur:e[12]||(e[12]=a=>d.finishEditing("concentration")),onKeyup:[e[13]||(e[13]=Q(a=>d.finishEditing("concentration"),["enter"])),e[14]||(e[14]=Q((...a)=>d.cancelEditing&&d.cancelEditing(...a),["esc"]))],ref:"volumeInput",class:"volume-input","data-type":"concentration",title:"Drug Concentration"},null,544)),[[ce,y.editingValue,void 0,{number:!0}]]):(N(),P("div",{key:0,class:"concentration",onDblclick:e[10]||(e[10]=a=>d.startEditing("concentration")),title:"Drug Concentration"},X(v.concentration!==null&&v.concentration!==void 0?Number(v.concentration).toFixed(2):""),33)),y.editing.units?ue((N(),P("input",{key:3,type:"text","onUpdate:modelValue":e[16]||(e[16]=a=>y.editingValue=a),onInput:e[17]||(e[17]=a=>d.handleInput("units")),onBlur:e[18]||(e[18]=a=>d.finishEditing("units")),onKeyup:[e[19]||(e[19]=Q(a=>d.finishEditing("units"),["enter"])),e[20]||(e[20]=Q((...a)=>d.cancelEditing&&d.cancelEditing(...a),["esc"]))],ref:"volumeInput",class:"volume-input","data-type":"units",title:"Concentration Units (for reference only)"},null,544)),[[ce,y.editingValue]]):(N(),P("div",{key:2,class:"units",onDblclick:e[15]||(e[15]=a=>d.startEditing("units")),title:"Concentration Units (for reference only)"},X(v.units),33))])):G("",!0)]),D("div",Ae,X(v.bottleName),1),v.icon?(N(),P("div",{key:0,class:ge(["bottle-icon",{"waste-icon":v.bottleName==="waste"}])},[I(T,{icon:v.icon,size:v.bottleName==="waste"?36:48},null,8,["icon","size"])],2)):G("",!0)])])}const je=se(he,[["render",Re],["__scopeId","data-v-a17e1836"]]);const ye={name:"BottleDisplay",components:{BottleSingle:je},setup(){const t=oe(),e=ee(()=>t.currentExperiment||{}),v=[{name:"main"},{name:"drug"},{name:"waste"}];function m(k){const E=T(k),M=Math.min(Math.max(E,100),5e3);return Math.max(Math.pow(M/1e3,1/3),.5)}function y(){return Math.max(...v.map(k=>m(k.name)))}function d(k){switch(k){case"main":return"rgba(255, 215, 0, 0.7)";case"drug":return"rgba(255, 165, 0, 0.7)";case"waste":return"rgba(255, 245, 0, 0.9)";default:return"rgba(255, 215, 0, 0.6)"}}function T(k){const E=e.value.parameters||{};switch(k){case"main":return Number(E.bottle_volume_main)||0;case"drug":return Number(E.bottle_volume_drug)||0;case"waste":return Number(E.bottle_volume_waste)||0;default:return 0}}function a(k){const E=e.value.parameters||{};switch(k){case"main":return Number(E.stock_volume_main)||0;case"drug":return Number(E.stock_volume_drug)||0;case"waste":return Number(E.stock_volume_waste)||0;default:return 0}}function b(){const k=e.value.parameters||{};return Number(k.stock_concentration_drug)||0}function x(){return(e.value.parameters||{}).concentration_units||"units"}async function _(k,E){console.log(`[BottleDisplay] updateBottleVolume called - bottleName: ${k}, value: ${E}`),console.log("[BottleDisplay] Current experiment parameters:",e.value.parameters);const M={...e.value.parameters};switch(k){case"main":M.bottle_volume_main=E;break;case"drug":M.bottle_volume_drug=E;break;case"waste":M.bottle_volume_waste=E;break}console.log("[BottleDisplay] Updated params:",M),await t.updateCurrentExperimentParameters(M),await t.fetchCurrentExperiment(),console.log("[BottleDisplay] Parameters updated and refreshed successfully")}async function B(k,E){console.log(`[BottleDisplay] updateCurrentVolume called - bottleName: ${k}, value: ${E}`),console.log("[BottleDisplay] Current experiment parameters:",e.value.parameters);const M={...e.value.parameters};switch(k){case"main":M.stock_volume_main=E;break;case"drug":M.stock_volume_drug=E;break;case"waste":M.stock_volume_waste=E;break}console.log("[BottleDisplay] Updated params:",M),await t.updateCurrentExperimentParameters(M),await t.fetchCurrentExperiment(),console.log("[BottleDisplay] Parameters updated and refreshed successfully")}async function V(k){console.log("updateConcentration called with value:",k);const E={...e.value.parameters},M=E.stock_concentration_drug;if(console.log("Current concentration:",M,"New concentration:",k),M!==k){E.stock_concentration_drug=k;for(let K=1;K<=7;K++)E.cultures[K]&&(E.cultures[K].pump2_stock_drug_concentration=k);await t.updateCurrentExperimentParameters(E),console.log("Parameters updated, showing toast"),c.success(`Drug concentration updated from ${M} to ${k} ${E.concentration_units}`)}}async function R(k){const E={...e.value.parameters};E.concentration_units=k,await t.updateCurrentExperimentParameters(E)}return{bottles:v,getBottleVolume:T,getCurrentVolume:a,updateBottleVolume:_,updateCurrentVolume:B,getLiquidColor:d,getConcentration:b,updateConcentration:V,getUnits:x,updateUnits:R,getMaxScale:y,currentExperiment:e}}},_e=()=>{Ce(t=>({"006a042d":280*t.getMaxScale()+"px"}))},we=ye.setup;ye.setup=we?(t,e)=>(_e(),we(t,e)):_e;const qe={class:"bottle-display"};function Ke(t,e,v,m,y,d){const T=H("BottleSingle");return N(),P("div",qe,[m.currentExperiment?(N(!0),P(de,{key:0},me(m.bottles,a=>(N(),ie(T,{key:a.name,"bottle-name":a.name,"total-volume":m.getBottleVolume(a.name),"current-volume":m.getCurrentVolume(a.name),icon:a.name==="drug"?"mdi-biohazard":a.name==="waste"?"mdi-trash-can":"","liquid-color":m.getLiquidColor(a.name),concentration:a.name==="drug"?m.getConcentration():null,units:a.name==="drug"?m.getUnits():null,"onUpdate:totalVolume":b=>m.updateBottleVolume(a.name,b),"onUpdate:currentVolume":b=>m.updateCurrentVolume(a.name,b),"onUpdate:concentration":e[0]||(e[0]=b=>m.updateConcentration(b)),"onUpdate:units":e[1]||(e[1]=b=>m.updateUnits(b))},null,8,["bottle-name","total-volume","current-volume","icon","liquid-color","concentration","units","onUpdate:totalVolume","onUpdate:currentVolume"]))),128)):G("",!0)])}const Xe=se(ye,[["render",Ke],["__scopeId","data-v-f0a20bf4"]]);const Ye=["innerHTML"],Ge=["innerHTML"],Ze={__name:"ExperimentChecks",setup(t,{expose:e}){const v=oe(),m=Ee(),y=F(!1),d=F(null),T=F(!0),a=F(!0),b=F(null),x=F([{id:"experiment_timing",name:"Experiment Selection & Timing",status:"pending",loading:!1,tooltip:"Checks that an experiment is selected and verifies timing safety. Warns if resuming after >3h delay as culture dynamics can become unstable.",details:""},{id:"pump_calibration",name:"Pump Calibration Monotonicity",status:"pending",loading:!1,tooltip:"Validates that pump calibration values (ml/rotation) are monotonically descending. Higher speeds should pump less volume per rotation (e.g., 50 rots < 10 rots < 5 rots < 1 rot). <br><br/><b>Tip:</b> If calibration fails, check for air bubbles in the tubing during calibration.",details:""},{id:"stirrer_calibration",name:"Stirrer Calibration (High > Low)",status:"pending",loading:!1,tooltip:"Validates that stirrer high speed setting is greater than low speed setting for all vials (1-7). This ensures proper speed differentiation.",details:""},{id:"od",name:"OD Calibration (OD0 > 20mV)",status:"pending",loading:!1,tooltip:"Checks that optical density blank calibration is above 20mV for all vials to ensure accurate OD measurements",details:""},{id:"current_od",name:"Current OD Values",status:"pending",loading:!1,tooltip:"Measures the current OD of all vials to ensure they are properly zeroed before starting a new experiment.",details:""},{id:"stock",name:"Stock Concentrations Match (Vials 1-7 & Stock Bottle)",status:"pending",loading:!1,tooltip:"Verifies that all vials (1-7) have the same drug concentration as the stock bottle to ensure experiment consistency"},{id:"pump1",name:"Pump1 Concentration Zero (All Vials)",status:"pending",loading:!1,tooltip:"Ensures pump1 (main media) has zero drug concentration in all vials."},{id:"waste",name:"Waste Bottle Capacity vs Current Stock Volumes",status:"pending",loading:!1,tooltip:"Media use may exceed prediction and overfill the waste bottle. Checks that the waste bottle has enough space to fit all the medium and drug medium."},{id:"volume",name:"Stock Volume Sufficient (24h Simulation)",status:"pending",loading:!1,tooltip:"Runs a 24-hour simulation to predict media and drug consumption, ensuring sufficient stock volumes are available"}]);function _(n){return n==="passed"?"success":n==="failed"?"error":n==="warning"?"warning":"grey"}function B(n){return n==="passed"?"Passed":n==="failed"?"Failed":n==="warning"?"Warning":"Pending"}async function V(n){n.details="",await new Promise(C=>setTimeout(C,300));const i=v.currentExperiment;if(!i||!i.id){n.status="failed",n.details=`<span class="experiment-timing-value red">
      <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
      No experiment selected - please select or create an experiment
    </span>`,c("No experiment selected",{type:"error",autoClose:1e4});return}try{const C=await v.fetchExperimentSummary();let p=null;for(let f=1;f<=7;f++){const r=C[`vial${f}`];if(r&&r.od_timestamp){const s=new Date(r.od_timestamp).getTime();(!p||s>p)&&(p=s)}}if(!p){n.status="passed",n.details=`<span class="experiment-timing-value green">
        <i class="v-icon mdi mdi-check-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Experiment "${i.name}" selected - no previous OD data (new experiment)
      </span>`,c("Experiment ready - no previous data found",{type:"success",autoClose:1e4});return}const g=new Date(p),u=(new Date-g)/(1e3*60*60);if(u>24){n.status="failed";const f=Math.floor(u),r=Math.floor((u-f)*60);n.details=`<span class="experiment-timing-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Last OD measurement was ${f}h ${r}m ago. Experiments idle >24h must be restarted. Autoclave tubing and start a new experiment.
      </span>`,c(`Error: Last measurement was ${f}h ${r}m ago. Must start new experiment.`,{type:"error",autoClose:1e4})}else if(u>3){n.status="warning";const f=Math.floor(u),r=Math.floor((u-f)*60);n.details=`<span class="experiment-timing-value yellow">
        <i class="v-icon mdi mdi-alert-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Last OD measurement was ${f}h ${r}m ago. Resuming after >3h delays can cause unstable culture dynamics. Consider autoclaving tubing and starting a new experiment.
      </span>`,c(`Warning: Last measurement was ${f}h ${r}m ago. Consider starting fresh.`,{type:"warning",autoClose:1e4})}else{n.status="passed";const f=Math.floor(u),r=Math.floor((u-f)*60);n.details=`<span class="experiment-timing-value green">
        <i class="v-icon mdi mdi-check-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Experiment "${i.name}" selected - last measurement ${f}h ${r}m ago (safe to resume)
      </span>`,c("Experiment timing is safe for resumption",{type:"success",autoClose:1e4})}}catch{n.status="passed",n.details=`<span class="experiment-timing-value green">
      <i class="v-icon mdi mdi-check-circle" style="font-size: 16px; vertical-align: middle;"></i> 
      Experiment "${i.name}" selected - no previous data available (new experiment)
    </span>`,c("Experiment selected - no previous data available",{type:"success",autoClose:1e4})}}const R=()=>T.value&&a.value;function k(){T.value=!document.hidden}function E(){d.value&&(b.value=new IntersectionObserver(n=>{a.value=n[0].isIntersecting},{threshold:.1}),b.value.observe(d.value))}const M=ee(()=>{const n=v.currentExperiment;if(!n)return!0;const i=n.status;return i==="stopped"||i==="inactive"||!i});async function K(n){var C;if(!R()){c("Cannot run checks while page/component is not visible",{type:"warning",autoClose:1e4});return}if(!M.value){const p=((C=v.currentExperiment)==null?void 0:C.status)||"unknown";c(`Cannot run checks while experiment is ${p}. Please wait for experiment to fully stop.`,{type:"warning",autoClose:1e4});return}const i=x.value.find(p=>p.id===n);i.loading=!0;try{n==="experiment_timing"?await V(i):n==="stock"?await O(i):n==="od"?await S(i):n==="current_od"?await j(i):n==="volume"?await L(i):n==="waste"?await Z(i):n==="pump1"?await q(i):n==="pump_calibration"?await re(i):n==="stirrer_calibration"&&await Y(i)}finally{i.loading=!1}}async function O(n){var l;await new Promise(u=>setTimeout(u,1500));const i=(l=v.currentExperiment)==null?void 0:l.parameters,C=i.stock_concentration_drug,g=Object.values(i.cultures).map(u=>u.pump2_stock_drug_concentration).every(u=>u===C);n.status=g?"passed":"failed",c(n.status==="passed"?"Stock concentrations verified":"Stock concentration mismatch detected",{type:n.status==="passed"?"success":"error",autoClose:1e4})}async function S(n){n.details="",await m.fetchDeviceData();const i=m.ods.calibration,C=[],p=[];if(!i){n.status="failed",c.error("OD calibration data not found. Please run a calibration.",{type:"error"});return}for(let l=1;l<=7;l++){const u=i[l],f=u?u["0.0"]??u[0]:void 0;if(f==null){C.push({vial:l,value:"N/A"});continue}f<15?C.push({vial:l,value:f}):f<20&&p.push({vial:l,value:f})}let g="";C.length>0?(n.status="failed",g+=C.map(l=>`<span class="od-value red">Vial ${l.vial}: ${typeof l.value=="number"?l.value.toFixed(1)+"mV":l.value}</span>`).join(""),c.error(`OD calibration failed for vials: ${C.map(l=>l.vial).join(", ")}`,{type:"error"})):p.length>0?(n.status="warning",c.warning(`OD calibration warning for vials: ${p.map(l=>l.vial).join(", ")}`,{type:"warning"})):(n.status="passed",c("OD calibration verified",{type:"success",autoClose:1e4})),p.length>0&&(g+=p.map(l=>`<span class="od-value yellow">Vial ${l.vial}: ${l.value.toFixed(1)}mV</span>`).join("")),g&&(n.details=`<div class="od-values-grid">${g}</div>`)}async function j(n){var f,r;n.details="";try{const s=[1,2,3,4,5,6,7];for(const w of s)try{await m.measureODs([w]),await new Promise(h=>setTimeout(h,50))}catch(h){if(console.warn(`Failed to measure OD for vial ${w}:`,h),console.log("Full vialError object:",{message:h.message,response:h.response,status:(f=h.response)==null?void 0:f.status,data:(r=h.response)==null?void 0:r.data}),h.response&&h.response.status===500||h.response&&h.response.data&&h.response.data.detail&&h.response.data.detail.includes("Device not initialized")||h.message&&h.message.includes("500")||h.message==="Network Error"||h.code==="ERR_NETWORK"||!h.response&&h.message){n.status="failed",n.details=`<span class="od-value red">
            <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
            Error - Device disconnected. Please check device connection and try again.
          </span>`,c("Error - Device disconnected. Check device connection.",{type:"error",autoClose:1e4}),console.log("Device disconnection error detected:",h);return}}}catch(s){s.response&&s.response.status===500||s.response&&s.response.data&&s.response.data.detail&&s.response.data.detail.includes("Device not initialized")||s.message&&s.message.includes("500")||s.message==="Network Error"||s.code==="ERR_NETWORK"||!s.response&&s.message?(n.status="failed",n.details=`<span class="od-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Error - Device disconnected. Please check device connection and try again.
      </span>`,c("Error - Device disconnected. Check device connection.",{type:"error"}),console.log("Device disconnection error detected:",s)):(n.status="failed",n.details=`<span class="od-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Failed to measure current ODs. Check device connection.
      </span>`,c("Failed to measure current ODs. Check device connection.",{type:"error"})),console.error(s);return}const i=m.ods.states,C=[1,2,3,4,5,6,7],p=[],g=[],l=C.map(s=>{const w=i[s];let h="",o="";w==null?(h="mdi-help-circle",o="grey"):w<-.03?(h="mdi-close-circle",o="red",p.push({vial:s,value:w})):w>.03?(h="mdi-alert-circle",o="yellow",g.push({vial:s,value:w})):(h="mdi-check-circle",o="green");const $=w!=null?w.toFixed(3):"N/A";return`<span class="od-value ${o}">
              <i class="v-icon mdi ${h}" style="font-size: 16px; vertical-align: middle;"></i> 
              Vial ${s}: ${$}
            </span>`}).join("");n.details=`<div class="od-values-grid">${l}</div>`;let u="";p.length>0?(n.status="failed",u+="<b>Error:</b> One or more vials have a very low OD reading (&lt; -0.03). This suggests a calibration issue. Please perform an OD calibration.",c.error(`OD check failed for vials: ${p.map(s=>s.vial).join(", ")}`,{type:"error"})):g.length>0?(n.status="warning",u+="<br/><br/><b>Warning:</b> One or more vials have a positive OD reading (&gt; 0.03). This is acceptable if you are resuming a previous experiment, but new experiments should start with zeroed ODs.",c.warning(`Positive OD detected for vials: ${g.map(s=>s.vial).join(", ")}`,{type:"warning"})):(n.status="passed",u+="<br/><br/><b>Passed:</b> All vial ODs are close to zero, which is ideal for starting a new experiment.",c.success("Current OD values verified.",{type:"success"})),n.tooltip=u}async function L(n){var C;n.details="",n.status="pending",c("Running 24h simulation for volume check...",{type:"info"});const i=(C=v.currentExperiment)==null?void 0:C.parameters;if(!i){n.status="failed",c("No experiment parameters found",{type:"error"});return}try{const p=[],g=[];for(let W=1;W<=7;W++)try{const J=await m.runSimulation(W,24);p.push({vial_id:W,...J.summary_data})}catch(J){console.error(`Vial ${W} simulation failed:`,J),g.push(W)}if(p.length===0){n.status="failed",n.details=`<span class="simulation-volume-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        All vials failed to simulate - check experiment parameters and device connection
      </span>`,c("Failed to fetch simulation data for volume calculation",{type:"error"});return}const l=p.reduce((W,J)=>W+J.pump1_volume_used,0),u=p.reduce((W,J)=>W+J.pump2_volume_used,0),f=p.reduce((W,J)=>W+J.waste_medium_volume_created,0),r=Number(i.stock_volume_drug)||0,s=Number(i.stock_volume_main)||0,w=Number(i.bottle_volume_waste)||0,h=Number(i.stock_volume_waste)||0,o=w-h,$=u<=r,z=l<=s,te=f<=o;let ne="";const le=[];if($||(le.push(`Drug: need ${u.toFixed(1)}mL, have ${r}mL`),ne+=`<span class="simulation-volume-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Drug bottle: need ${u.toFixed(1)}mL, have ${r}mL (${(u-r).toFixed(1)}mL short)
      </span>`),z||(le.push(`Media: need ${l.toFixed(1)}mL, have ${s}mL`),ne+=`<span class="simulation-volume-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Main bottle: need ${l.toFixed(2)}mL, have ${s.toFixed(2)}mL (${(l-s).toFixed(2)}mL short)
      </span>`),te||(le.push(`Waste: need ${f.toFixed(1)}mL, only ${o.toFixed(1)}mL available`),ne+=`<span class="simulation-volume-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Waste bottle: need ${f.toFixed(1)}mL space, only ${o.toFixed(1)}mL available (${(f-o).toFixed(1)}mL overflow)
      </span>`),g.length>0&&(ne+=`<span class="simulation-volume-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Failed simulations: Vial${g.length>1?"s":""} ${g.join(", ")} - check parameters
      </span>`),ne&&(n.details=`<div class="simulation-volume-grid">${ne}</div>`),$&&z&&te&&g.length===0)n.status="passed",c(`Stock volumes sufficient. Drug: ${u.toFixed(1)}/${r}mL, Media: ${l.toFixed(1)}/${s}mL, Waste: ${f.toFixed(1)}/${o.toFixed(1)}mL available`,{type:"success"});else if(g.length>0&&le.length===0)n.status="warning",c(`Simulation warnings: ${g.length} vial(s) failed but volumes are sufficient for others`,{type:"warning"});else{n.status="failed";const W=[...le];g.length>0&&W.push(`${g.length} vial(s) failed simulation`),c(`Volume issues. ${W.join(", ")}`,{type:"error"})}}catch(p){n.status="failed",n.details=`<span class="simulation-volume-value red">
      <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
      Simulation error: ${p.message||"Unknown error"}
    </span>`,c("Simulation failed: "+(p.message||"Unknown error"),{type:"error"})}}async function Z(n){var r;await new Promise(s=>setTimeout(s,300));const i=(r=v.currentExperiment)==null?void 0:r.parameters;if(!i){n.status="failed",c("No experiment parameters found",{type:"error"});return}const C=Number(i.stock_volume_main)||0,p=Number(i.stock_volume_drug)||0,g=Number(i.bottle_volume_waste)||0,l=Number(i.stock_volume_waste)||0,u=g-l,f=C+p;f<=u?(n.status="passed",c(`Waste capacity sufficient. Current stocks: ${f.toFixed(1)}mL, Available waste space: ${u.toFixed(1)}mL`,{type:"success"})):(n.status="warning",c(`Warning: Current stock volumes (${f.toFixed(1)}mL) exceed available waste space (${u.toFixed(1)}mL). Overflow may occur.`,{type:"warning"}))}async function q(n){var p;await new Promise(g=>setTimeout(g,500));const i=(p=v.currentExperiment)==null?void 0:p.parameters;if(!i||!i.cultures){n.status="failed",c("No experiment parameters or cultures found",{type:"error"});return}const C=[];for(let g=1;g<=7;g++){const l=i.cultures[g];if(l){const u=l.pump1_stock_drug_concentration||0;u!==0&&C.push(`Vial ${g}: ${u}`)}}C.length>0?(n.status="failed",c(`Pump1 concentration not zero in: ${C.join(", ")}`,{type:"error"})):(n.status="passed",c("All vials have pump1 concentration set to zero",{type:"success"}))}async function re(n){n.details="",await m.fetchDeviceData();const i=m.pumps;if(!i||!i.calibration){n.status="failed",c("Pump calibration data not found. Please run pump calibration.",{type:"error"});return}const C=[1,2,4],p={1:"MAIN",2:"DRUG",4:"WASTE"},g=[],l=[];let u="";for(const f of C){const r=i.calibration[f];if(!r||Object.keys(r).length===0){g.push(`${p[f]} (no calibration data)`),u+=`<span class="pump-calibration-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        ${p[f]}: Missing calibration data - please calibrate this pump
      </span>`;continue}const s=Object.entries(r).map(([o,$])=>[parseInt(o),parseFloat($)]).sort((o,$)=>o[0]-$[0]);if(s.length<2){l.push(`${p[f]} (insufficient data points)`),u+=`<span class="pump-calibration-value yellow">
        <i class="v-icon mdi mdi-alert-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        ${p[f]}: Only ${s.length} calibration point(s) - need at least 2 to check monotonicity
      </span>`;continue}let w=!0;const h=[];for(let o=1;o<s.length;o++){const $=s[o-1],z=s[o];z[1]>$[1]&&(w=!1,h.push(`${z[0]} rots pumps MORE than ${$[0]} rots (${z[1].toFixed(3)} vs ${$[1].toFixed(3)} ml/rot)`))}w||(g.push(`${p[f]} (non-monotonic)`),u+=`<span class="pump-calibration-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        ${p[f]}: Invalid calibration - ${h.join("; ")}
      </span>`)}u&&(n.details=`<div class="pump-calibration-grid">${u}</div>`),g.length>0?(n.status="failed",c(`Pump calibration monotonicity failed for: ${g.join(", ")}`,{type:"error"})):l.length>0?(n.status="warning",c(`Pump calibration warnings for: ${l.join(", ")}`,{type:"warning"})):(n.status="passed",c("All pump calibrations are monotonically correct",{type:"success"}))}async function Y(n){n.details="",await m.fetchDeviceData();const i=m.stirrers;if(!i||!i.calibration){n.status="failed",c("Stirrer calibration data not found. Please run stirrer calibration.",{type:"error"});return}const C=[1,2,3,4,5,6,7],p=[];let g="";for(const l of C){const u=i.calibration[l];if(!u||typeof u!="object"){p.push(`Stirrer ${l} (no calibration data)`),g+=`<span class="stirrer-calibration-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Stirrer ${l}: Missing calibration data - please calibrate this stirrer
      </span>`;continue}const{high:f,low:r}=u;if(f==null||r===void 0||r===null){p.push(`Stirrer ${l} (incomplete calibration)`),g+=`<span class="stirrer-calibration-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Stirrer ${l}: Incomplete calibration data (high: ${f}, low: ${r})
      </span>`;continue}f<=r&&(p.push(`Stirrer ${l} (high ≤ low)`),g+=`<span class="stirrer-calibration-value red">
        <i class="v-icon mdi mdi-close-circle" style="font-size: 16px; vertical-align: middle;"></i> 
        Stirrer ${l}: High speed (${f.toFixed(3)}) must be greater than low speed (${r.toFixed(3)})
      </span>`)}g&&(n.details=`<div class="stirrer-calibration-grid">${g}</div>`),p.length>0?(n.status="failed",c(`Stirrer calibration failed for: ${p.join(", ")}`,{type:"error"})):(n.status="passed",c("All stirrer calibrations are correct (high > low)",{type:"success"}))}async function fe(){var n;if(!R()){c("Cannot run checks while page/component is not visible",{type:"warning"});return}if(!M.value){const i=((n=v.currentExperiment)==null?void 0:n.status)||"unknown";c(`Cannot run checks while experiment is ${i}. Please wait for experiment to fully stop.`,{type:"warning"});return}y.value=!0;try{for(const l of x.value)await K(l.id);const i=x.value.filter(l=>l.status==="passed").length,C=x.value.filter(l=>l.status==="failed").length,p=x.value.filter(l=>l.status==="warning").length,g=x.value.length;if(C===0&&p===0)c(`All ${g} checks passed! Experiment ready to start.`,{type:"success",autoClose:1e4});else if(C===0&&p>0)c(`${i} checks passed, ${p} warning(s). Review warnings before starting.`,{type:"warning"});else if(C>0){const l=[];C>0&&l.push(`${C} failed`),p>0&&l.push(`${p} warning(s)`),c(`${i}/${g} checks passed, ${l.join(", ")}. Review issues before starting.`,{type:"warning"})}else c(`All ${g} checks failed. Address issues before starting experiment.`,{type:"error"})}catch(i){c("Error running checks: "+(i.message||"Unknown error"),{type:"error"})}finally{y.value=!1}}return pe(()=>{document.addEventListener("visibilitychange",k),E(),T.value=!document.hidden}),Ve(()=>{document.removeEventListener("visibilitychange",k),b.value&&b.value.disconnect()}),e({checks:x,isPageVisible:T,isComponentVisible:a,shouldAllowUpdates:R}),(n,i)=>{const C=H("v-btn"),p=H("v-chip"),g=H("v-tooltip"),l=H("v-table");return N(),P("div",{class:"experiment-checks",ref_key:"checksContainer",ref:d},[I(l,null,{default:U(()=>[D("thead",null,[D("tr",null,[D("th",null,[I(C,{color:"primary",onClick:fe,loading:y.value,disabled:x.value.some(u=>u.loading)||!M.value,size:"small"},{default:U(()=>i[0]||(i[0]=[A(" Verify All ")])),_:1},8,["loading","disabled"])]),i[1]||(i[1]=D("th",null,"Status",-1)),i[2]||(i[2]=D("th",null,"Pre-experiment Checks",-1))])]),D("tbody",null,[(N(!0),P(de,null,me(x.value,u=>(N(),P("tr",{key:u.id},[D("td",null,[I(C,{size:"small",onClick:f=>K(u.id),loading:u.loading,disabled:u.loading||!M.value},{default:U(()=>i[3]||(i[3]=[A(" Verify ")])),_:2},1032,["onClick","loading","disabled"])]),D("td",null,[I(p,{color:_(u.status),size:"small"},{default:U(()=>[A(X(B(u.status)),1)]),_:2},1032,["color"])]),D("td",null,[I(g,{location:"top"},{activator:U(({props:f})=>[D("div",ke({ref_for:!0},f),[D("span",null,X(u.name),1),u.details?(N(),P("div",{key:0,innerHTML:u.details,class:"od-details-container"},null,8,Ye)):G("",!0)],16)]),default:U(()=>[D("div",{innerHTML:u.tooltip},null,8,Ge)]),_:2},1024)])]))),128))])]),_:1})],512)}}},Je=se(Ze,[["__scopeId","data-v-be7412ee"]]);const Qe={class:"experiment-setup"},et={class:"d-flex line-container"},tt={class:"d-flex line-container"},nt={key:0,class:"new-experiment-form"},at={class:"form-header"},it={class:"form-note"},st={class:"form-content"},ot={class:"form-input-row"},rt={key:2},lt={__name:"ExperimentSetup",setup(t){const e=oe(),{openDialog:v}=De(),m=F(""),y=F(!1),d=F(null),T=F(null),a=F(!1),b=F(!0),x=ee(()=>e.experiments),_=ee(()=>e.currentExperiment||{}),B=ee(()=>[...x.value].reverse());async function V(){_.value.status==="running"&&await e.stopExperiment(),await e.selectExperiment(d.value)}async function R(){y.value=!y.value,_.value.status==="running"&&await e.stopExperiment()}async function k(){if(!m.value||m.value.trim()===""){c("Experiment name cannot be empty",{type:"error"});return}const O=m.value.trim();if(/[<>:"/\\|?*\x00-\x1f]/.test(O)){c('Experiment name contains invalid characters. Avoid: < > : " / \\ | ? *',{type:"error"});return}if(/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i.test(O)){c("Experiment name cannot be a reserved system name",{type:"error"});return}if(O.startsWith(".")||O.endsWith(".")||O.endsWith(" ")){c("Experiment name cannot start or end with dots or spaces",{type:"error"});return}if(O.length>255){c("Experiment name is too long (maximum 255 characters)",{type:"error"});return}try{d.value=await e.createExperiment({name:O}),await e.selectExperiment(d.value),y.value=!1,m.value=_.value.name,c(`New experiment "${O}" created`,{type:"success"})}catch(L){c(L.message||"Failed to create experiment",{type:"error"})}}function E(){return!_.value||_.value.id===0?"Default Template":_.value.name||"Default Template"}async function M(){if(T.value){const O=T.value.checks,S=O.filter(L=>L.status==="failed"),j=O.filter(L=>L.status==="pending");if(S.length>0||j.length>0){S.map(q=>q.name),j.map(q=>q.name);let L="";if(S.length>0&&j.length>0?L="Some checks failed and some are pending.":S.length>0?L="Some checks failed.":L="Some checks are pending.",L+=`

Start experiment anyway?`,!await v({title:"Pre-experiment Checks Warning",message:L}))return}}try{await e.startExperiment(),await e.fetchCurrentExperiment(),c("Experiment started!",{type:"success"})}catch(O){c(O.message,{type:"error"})}}async function K(){var O;console.log("Stop experiment clicked, setting loading to true"),a.value=!0;try{console.log("Calling experimentStore.stopExperiment()"),await e.stopExperiment(),console.log("Stop experiment request sent, polling for actual status change");let S=0;const j=30;for(;S<j;){await new Promise(Z=>setTimeout(Z,1e3)),await e.fetchCurrentExperiment();const L=(O=e.currentExperiment)==null?void 0:O.status;if(console.log(`Polling attempt ${S+1}: status = ${L}`),L==="stopped"||L==="inactive"||!L){console.log("Experiment confirmed stopped"),c("Experiment stopped!",{type:"success"});return}L==="stopping"&&console.log("Experiment still stopping, continuing to poll..."),S++}console.warn("Stop polling timed out, but experiment may have stopped"),c("Stop command sent, but status confirmation timed out",{type:"warning"})}catch(S){console.error("Error stopping experiment:",S),c(S.message||"Failed to stop experiment",{type:"error"})}finally{console.log("Setting loading to false"),a.value=!1}}return pe(async()=>{try{await e.fetchExperiments(),await e.fetchCurrentExperiment(),e.currentExperiment&&(d.value=e.currentExperiment.id)}finally{b.value=!1}}),(O,S)=>{const j=H("v-select"),L=H("v-btn"),Z=H("v-icon"),q=H("v-text-field"),re=H("v-container");return N(),ie(re,null,{default:U(()=>[D("div",Qe,[D("div",et,[I(j,{modelValue:d.value,"onUpdate:modelValue":[S[0]||(S[0]=Y=>d.value=Y),V],items:B.value,"item-title":"name","item-value":"id",label:"Select Experiment",dense:"",outlined:"",class:"flex-grow-1 mt-3 experiment-select",style:{minWidth:"150px"},disabled:_.value.status==="running"||_.value.status==="stopping"||b.value,loading:b.value},null,8,["modelValue","items","disabled","loading"]),I(L,{color:"primary",onClick:R,class:"mt-3",style:{height:"60px"},title:"New Experiment",disabled:_.value.status==="running"||_.value.status==="stopping"||b.value,loading:b.value},{default:U(()=>S[3]||(S[3]=[A("+")])),_:1},8,["disabled","loading"])]),D("div",tt,[I(L,{class:ge(["start-button",{active:_.value.status==="running"}]),style:ae({"background-color":_.value.status==="running"?"#28a745":"transparent",opacity:_.value.status==="running"?.5:1}),onClick:M,color:"success",title:"Start the experiment loop - measure OD every minute and dilute the cultures as necessary, according to the parameters.",disabled:_.value.status==="running"||_.value.status==="stopping"||b.value,loading:b.value},{default:U(()=>S[4]||(S[4]=[A(" Start ")])),_:1},8,["class","style","disabled","loading"]),I(L,{class:ge(["start-button",{active:_.value.status==="stopped"}]),style:ae({"background-color":_.value.status==="stopped"?"#dc3545":"transparent",opacity:_.value.status==="stopped"?.5:1}),onClick:K,color:"error",title:"Stop gracefully - wait for the current dilution to finish.",disabled:_.value.status==="stopped"||_.value.status==="stopping"||a.value||b.value,loading:a.value},{default:U(()=>S[5]||(S[5]=[A(" Stop ")])),_:1},8,["class","style","disabled","loading"])]),y.value?(N(),P("div",nt,[D("div",at,[D("div",it,[S[6]||(S[6]=A(" New experiment will copy parameters from ")),D("strong",null,X(E()),1)]),I(L,{icon:"",size:"small",onClick:S[1]||(S[1]=Y=>y.value=!1),class:"close-btn",title:"Close"},{default:U(()=>[I(Z,{size:"18"},{default:U(()=>S[7]||(S[7]=[A("mdi-close")])),_:1})]),_:1})]),D("div",st,[D("div",ot,[I(q,{modelValue:m.value,"onUpdate:modelValue":S[2]||(S[2]=Y=>m.value=Y),label:"New Experiment Name",outlined:"",dense:"",class:"flex-grow-1",onKeyup:Q(k,["enter"])},null,8,["modelValue"]),I(L,{color:"primary",onClick:k,class:"ml-3 create-btn"},{default:U(()=>S[8]||(S[8]=[A("Create Experiment")])),_:1})])])])):G("",!0),_.value&&_.value.id&&_.value.id!==0&&_.value.status!=="running"?(N(),ie(Je,{key:1,ref_key:"experimentChecks",ref:T},null,512)):G("",!0),_.value&&_.value.id&&_.value.id!==0?(N(),P("div",rt,[I(Xe)])):G("",!0)])]),_:1})}}},ut=se(lt,[["__scopeId","data-v-04512f79"]]);const ct=Se({components:{TableComponent:Ne},setup(){const t=oe(),e=Ee(),v=F(!1),m=F(null),y=F(null),d=F(0),T=F(new Date),a=F(null),b=F(!0),x=F(!0),_=F(null),B=F(null),V=F([]),R=["Last OD","OD Timestamp","Growth Rate (1/h)","RPM (1h)","Current Concentration","Medium Used (1h)","Medium Used (24h)","Drug Used (1h)","Drug Used (24h)","Total Dilutions","Last Dilution","Runtime"],k={"Last OD":"Most recent optical density measurement","OD Timestamp":"Time when the last OD measurement was taken","Growth Rate (1/h)":"Current growth rate (mu)","RPM (1h)":"Average stirrer speed over the last hour (mean ± standard deviation)","Current Concentration":"Current drug concentration in the culture","Medium Used (1h)":"Volume of pump1 medium growth medium consumed in the last hour","Medium Used (24h)":"Volume of pump1 medium consumed in the last 24 hours","Drug Used (1h)":"Volume of pump2 medium (drug) consumed in the last hour","Drug Used (24h)":"Volume of pump2 medium (drug) consumed in the last 24 hours","Total Dilutions":"Total number of dilution events since experiment start","Last Dilution":"Most recent dilution event",Runtime:"Time between first and last OD measurements"},E=F({show:!1,text:"",x:0,y:0});function M(){V.value=R.map(()=>Array(8).fill("—"))}function K(){const r=[5,6,7,8,9];for(const w of r){let h=0,o=!1;for(let $=0;$<7;$++){const z=V.value[w][$];if(z!=="—"){const te=parseFloat(z.toString().replace(/[^\d.-]/g,""));isNaN(te)||(h+=te,o=!0)}}if(o)if(w===9)V.value[w][7]=h.toString();else{const $="mL";V.value[w][7]=`${h.toFixed(2)} ${$}`}else V.value[w][7]="—"}const s=[0,1,2,3,4,10,11];for(const w of s)V.value[w][7]="—"}async function O(){return{data:V.value,keys:R}}async function S(r){console.log("Summary table is read-only")}function j(r){var w;const s=r.target.closest(".rgCell");if(s){const h=(w=s.textContent)==null?void 0:w.trim();if(h&&k[h]){const o=s.getBoundingClientRect(),$=B.value.getBoundingClientRect();E.value={show:!0,text:k[h],x:o.left-$.left,y:o.top-$.top-40}}}}function L(){E.value.show=!1}function Z(r){if(!r)return"";const s=T.value,w=new Date(r),h=Math.max(0,Math.floor((s-w)/1e3));if(h<60)return`${h} seconds ago`;if(h<3600){const o=Math.floor(h/60);return`${o} minute${o!==1?"s":""} ago`}else{const o=Math.floor(h/3600);return`${o} hour${o!==1?"s":""} ago`}}async function q(){v.value=!0;try{await re(),m.value=new Date}catch(r){console.error("Failed to refresh summary data:",r),c.error(`Failed to refresh summary data: ${r.message||"Unknown error"}`)}finally{v.value=!1}}async function re(){if(t.currentExperiment)try{const s=await t.fetchExperimentSummary();await e.fetchDeviceData(),await t.fetchCurrentExperiment(),V.value.length===0&&M();for(let w=1;w<=7;w++){const h=`vial${w}`,o=s[h],$=w-1;if(o){if(V.value[0][$]=o.last_od!==null&&o.last_od!==void 0?o.last_od.toFixed(3):"—",V.value[1][$]=o.od_timestamp?new Date(o.od_timestamp).toLocaleTimeString():"—",V.value[2][$]=o.growth_rate!==null&&o.growth_rate!==void 0?o.growth_rate.toFixed(3):"—",o.rpm_mean_1h!==null&&o.rpm_mean_1h!==void 0){const z=o.rpm_mean_1h.toFixed(0),te=o.rpm_std_1h!==null?o.rpm_std_1h.toFixed(0):"0";V.value[3][$]=`${z} ± ${te}`}else V.value[3][$]="—";V.value[4][$]=o.current_concentration!==null&&o.current_concentration!==void 0?o.current_concentration.toFixed(3):"—",V.value[5][$]=o.medium_used_1h!==null&&o.medium_used_1h!==void 0?`${o.medium_used_1h.toFixed(2)} mL`:"—",V.value[6][$]=o.medium_used_24h!==null&&o.medium_used_24h!==void 0?`${o.medium_used_24h.toFixed(2)} mL`:"—",V.value[7][$]=o.drug_used_1h!==null&&o.drug_used_1h!==void 0?`${o.drug_used_1h.toFixed(2)} mL`:"—",V.value[8][$]=o.drug_used_24h!==null&&o.drug_used_24h!==void 0?`${o.drug_used_24h.toFixed(2)} mL`:"—",V.value[9][$]=o.total_dilutions||"—",V.value[10][$]=o.last_dilution||"—",V.value[11][$]=o.runtime||"—"}else for(let z=0;z<12;z++)V.value[z][$]="—"}K(),d.value+=1}catch(s){throw console.error("Error fetching experiment summary:",s),s}}const Y=()=>b.value&&x.value,fe=()=>{const r=t.currentExperiment;if(!r)return!1;const s=r.status==="running",w=Y();return s&&w};function n(){b.value=!document.hidden}function i(){B.value&&(_.value=new IntersectionObserver(r=>{x.value=r[0].isIntersecting},{threshold:.1}),_.value.observe(B.value))}function C(){y.value=setInterval(()=>{if(fe())q();else{const r=t.currentExperiment,s=(r==null?void 0:r.status)||"no experiment",w=Y()?"visible":"not visible";console.log(`ExperimentSummary: Skipping auto-refresh - experiment ${s}, component ${w}`)}},3e4)}function p(){y.value&&(clearInterval(y.value),y.value=null)}function g(){a.value=setInterval(()=>{T.value=new Date},1e3)}function l(){a.value&&(clearInterval(a.value),a.value=null)}const u=ee(()=>m.value?Z(m.value):""),f=ee(()=>{const r=R.length,s=32,w=55,h=40,o=50,$=20;return r*s+w+h+o+$});return Te(()=>{var r;return(r=t.currentExperiment)==null?void 0:r.id},(r,s)=>{r!==s&&(console.log("Experiment changed, refreshing summary table"),M(),d.value+=1,q())},{immediate:!1}),pe(()=>{if(M(),q(),C(),g(),document.addEventListener("visibilitychange",n),i(),b.value=!document.hidden,B.value){const r=B.value.querySelector(".table-container");r&&r.addEventListener("wheel",s=>{s.deltaX!==0?(s.preventDefault(),r.scrollLeft+=s.deltaX):s.shiftKey&&s.deltaY!==0&&(s.preventDefault(),r.scrollLeft+=s.deltaY)},{passive:!1})}}),Ve(()=>{p(),l(),document.removeEventListener("visibilitychange",n),_.value&&_.value.disconnect()}),{loading:v,lastUpdated:m,fetchTableData:O,updateTableData:S,formatTime:Z,refreshData:q,toast:c,tableKey:d,lastUpdatedText:u,containerHeight:f,summaryContainer:B,isPageVisible:b,isComponentVisible:x,shouldAllowUpdates:Y,tooltip:E,handleTableMouseOver:j,handleTableMouseOut:L}}}),dt={class:"refresh-controls"},mt={class:"last-updated"};function pt(t,e,v,m,y,d){const T=H("TableComponent"),a=H("v-icon"),b=H("v-btn");return N(),P("div",{class:"experiment-summary-container",ref:"summaryContainer",style:ae({minHeight:t.containerHeight+"px"})},[D("h2",null,[e[3]||(e[3]=A(" Experiment Summary ")),D("span",{class:"info-icon",onClick:e[0]||(e[0]=x=>t.toast.info("Live experiment data summary with auto-refresh every 30 seconds.",{position:"top-right",autoClose:8e3})),style:{cursor:"pointer","margin-left":"8px","font-size":"0.8em"}}," ⓘ ")]),D("div",{class:"table-container",onMouseover:e[1]||(e[1]=(...x)=>t.handleTableMouseOver&&t.handleTableMouseOver(...x)),onMouseout:e[2]||(e[2]=(...x)=>t.handleTableMouseOut&&t.handleTableMouseOut(...x))},[(N(),ie(T,{key:t.tableKey,fetchData:t.fetchTableData,updateData:t.updateTableData,columnHeaders:["Vial 1","Vial 2","Vial 3","Vial 4","Vial 5","Vial 6","Vial 7","Total"],rowHeaderLabel:"Metric",rowHeaderWidth:200,readonly:!0,fixedRows:12},null,8,["fetchData","updateData"])),t.tooltip.show?(N(),P("div",{key:0,class:"custom-tooltip",style:ae({top:t.tooltip.y+"px",left:t.tooltip.x+"px"})},X(t.tooltip.text),5)):G("",!0)],32),D("div",dt,[I(b,{color:"primary",size:"small",loading:t.loading,onClick:t.refreshData},{default:U(()=>[I(a,{left:""},{default:U(()=>e[4]||(e[4]=[A("mdi-refresh")])),_:1}),e[5]||(e[5]=A(" Refresh "))]),_:1},8,["loading","onClick"]),D("span",mt,X(t.lastUpdated?`Last updated: ${t.lastUpdatedText}`:""),1)])],4)}const ft=se(ct,[["render",pt],["__scopeId","data-v-f2b85e3c"]]);const vt={id:"CulturePlot"},gt={class:"control-container"},ht={class:"button-row"},yt={class:"button-container"},bt={__name:"ExperimentChart",setup(t){const e=oe(),{currentExperiment:v,selectedVials:m,plot_data:y}=$e(e),d=[1,2,3,4,5,6,7],T=ee(()=>d.filter(x=>m.value[x]));async function a(){if(v.value)for(let x of T.value)await e.fetchCulturePlot(x)}async function b(x,_){let B;_.altKey?B={[x]:!0}:B={...m.value,[x]:!m.value[x]},e.setSelectedVials(B),B[x]&&await e.fetchCulturePlot(x)}return pe(()=>{a()}),(x,_)=>{const B=H("v-btn");return N(),P("div",vt,[D("div",gt,[D("div",ht,[I(B,{class:"plot-button",color:"success",onClick:a,title:"Plot selected vials. alt-click to select single vial"},{default:U(()=>_[0]||(_[0]=[A("Plot Data")])),_:1}),D("div",yt,[(N(),P(de,null,me(d,V=>D("div",{key:V,class:"button-item"},[I(B,{color:ve(m)[V]?"primary":"secondary",style:ae({"background-color":ve(m)[V]?"#007bff":"transparent"}),onClick:R=>b(V,R),id:`vial-button-${V}`},{default:U(()=>[A(X(`Vial ${V}`),1)]),_:2},1032,["color","style","onClick","id"])])),64))])])]),(N(!0),P(de,null,me(T.value,V=>(N(),P("div",{key:V},[I(Me,{vial:V,data:ve(y)[V]},null,8,["vial","data"])]))),128))])}}},xt=se(bt,[["__scopeId","data-v-9ef9e3fb"]]),$t={__name:"ExperimentTab",setup(t){const e=oe(),{experiments:v,currentExperiment:m,errorMessage:y}=$e(e),d=ee(()=>{var a,b;return Object.keys(((b=(a=m.value)==null?void 0:a.parameters)==null?void 0:b.cultures)||{}).length>0});return(T,a)=>(N(),P("div",null,[I(ut),d.value?(N(),ie(ft,{key:0})):G("",!0),d.value?(N(),ie(xt,{key:1})):G("",!0)]))}};export{$t as default};
