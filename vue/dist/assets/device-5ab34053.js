import{V as n,S as a}from"./index-13bfb768.js";const d=n("device",{state:()=>({deviceConnected:!1,deviceControlEnabled:!1,calibrationModeEnabled:!1,valves:{},pumps:{},stirrers:{},ods:{},thermometers:{},leds:{},isFetchingCalibration:!1,errorMessage:null}),actions:{async fetchDeviceData(){try{const e=await a.get("/get-all-device-data");if(e.data.success){const t=e.data.device_states;this.valves=t.valves,this.pumps=t.pumps,this.stirrers=t.stirrers,this.ods=t.ods,this.thermometers=t.temperatures,this.leds=t.leds,this.deviceConnected=!0,this.deviceControlEnabled=!0}else this.deviceConnected=!1,this.deviceControlEnabled=!1,this.errorMessage="Failed to fetch device data."}catch{this.deviceConnected=!1,this.deviceControlEnabled=!1,this.errorMessage="Failed to fetch device data."}},async setPartState(e,t,s,i){try{const r=await a.post(`/set-${e}-state`,{partIndex:t,newState:s,input:i});if(r.data.success)return await this.fetchDeviceData(),r.data;{const c=new Error(r.data.message||`Failed to set ${e} state.`);throw this.errorMessage=c.message,c}}catch(r){throw this.errorMessage=`Failed to set ${e} state: ${r.message}`,r}},async setLedColor(e,t,s,i){try{(await a.post("/set-led-color",{vial:e,red:t,green:s,blue:i})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to set LED color."}catch{this.errorMessage="Failed to set LED color."}},async setPartCalibration(e,t,s){try{(await a.post(`/set-${e}-calibration`,{partIndex:t,newCalibration:s})).data.success?await this.fetchDeviceData():this.errorMessage=`Failed to set ${e} calibration.`}catch{this.errorMessage=`Failed to set ${e} calibration.`}},async connectDevice(){try{(await a.post("/connect-device")).data.success?(this.deviceConnected=!0,this.deviceControlEnabled=!0,await this.fetchDeviceData()):(this.deviceConnected=!1,this.deviceControlEnabled=!1,this.errorMessage="Failed to connect device.")}catch{this.deviceConnected=!1,this.deviceControlEnabled=!1,this.errorMessage="Failed to connect device."}},setDeviceControlEnabled(e){this.deviceControlEnabled=e},setCalibrationModeEnabled(e){this.calibrationModeEnabled=e},setErrorMessage(e){this.errorMessage=e},async setPartStateAction(e){return this.setPartState(e.devicePart,e.partIndex,e.newState,e.input)},async setPartCalibrationAction(e){return console.log("setPartCalibrationAction",e),this.setPartCalibration(e.devicePart,e.partIndex,e.newCalibration)},toggleCalibrationMode(){this.calibrationModeEnabled=!this.calibrationModeEnabled},async measureDevicePart({devicePart:e,partIndex:t}){try{const s=await a.post(`/measure-${e}`,{partIndex:t});if(s.data.success)await this.fetchDeviceData();else throw this.errorMessage=`Failed to measure ${e}.`,console.log("Device store: Response not successful, throwing error"),new Error(s.data.message||`Failed to measure ${e}.`)}catch(s){throw console.log("Device store: Caught error",s),this.errorMessage=`Failed to measure ${e}.`,s}},async measureODs(e){try{const t=e.map(s=>this.measureDevicePart({devicePart:"ods",partIndex:s}));await Promise.all(t)}catch(t){throw console.error("Error measuring multiple ODs:",t),this.errorMessage="Failed to measure one or more ODs.",t}},async setAllStirrersStateAction(e){const t=[1,2,3,4,5,6,7];await Promise.all(t.map(s=>this.setPartState("stirrers",s,e))),await this.fetchDeviceData()},async measureODCalibrationAction({odValue:e}){try{(await a.post("/measure-od-calibration",{odValue:parseFloat(e)})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to measure OD calibration."}catch{this.errorMessage="Failed to measure OD calibration."}},async updateODCalibrationKeyAction({oldOD:e,newOD:t}){try{(await a.post("/update-od-calibration-key",{oldOD:e,newOD:t})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to update OD calibration key."}catch{this.errorMessage="Failed to update OD calibration key."}},async updateODCalibrationValueAction({od:e,vial:t,newValue:s}){try{(await a.post("/update-od-calibration-value",{od:e,vial:t,newValue:s})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to update OD calibration value."}catch{this.errorMessage="Failed to update OD calibration value."}},async removeODCalibrationRowAction(e){try{(await a.post("/remove-od-calibration-row",{odValue:e})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to remove OD calibration row."}catch{this.errorMessage="Failed to remove OD calibration row."}},async saveCalibrationToBackend(){try{(await a.post("/save-calibration")).data.success?await this.fetchDeviceData():this.errorMessage="Failed to save calibration."}catch{this.errorMessage="Failed to save calibration."}},async listDeviceConfigs(){try{return(await a.get("/list-device-configs")).data.configs}catch{this.errorMessage="Failed to list device configs."}},async loadDeviceConfig(e){try{(await a.post("/load-device-config",{filename:e})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to load device config."}catch{this.errorMessage="Failed to load device config."}},async startPumpCalibrationSequence(e){const{pumpId:t,rotations:s,iterations:i}=e,r="pumps",c="/start-pump-calibration-sequence";try{const o=await a.post(c,{pumpId:t,rotations:s,iterations:i});if(o.data.success)return await this.setPartStateAction({devicePart:r,partIndex:t,newState:"stopped"}),await this.fetchDeviceData(),!0;throw this.errorMessage=`Error updating ${r} calibration: ${o.data.message}`,new Error(this.errorMessage)}catch(o){throw this.errorMessage=`Error updating ${r} calibration: ${o.message||o}`,o}},async fetchODCalibrationData(){this.isFetchingCalibration=!0;try{const e=await a.post("/run-ods-test");e.data.success?this.ods=e.data.max_signals:this.errorMessage="Failed to fetch OD calibration data."}catch{this.errorMessage="Failed to fetch OD calibration data."}finally{this.isFetchingCalibration=!1}},async fetchStirrerCalibrationData(){this.isFetchingCalibration=!0;try{const e=await a.post("/run-stirrer-test");e.data.success?this.stirrers=e.data.device_states.stirrers:this.errorMessage="Failed to fetch stirrer calibration data."}catch{this.errorMessage="Failed to fetch stirrer calibration data."}finally{this.isFetchingCalibration=!1}},async setValveDutyCycleAction(e){try{(await a.post("/set-valve-duty-cycle",e)).data.success?await this.fetchDeviceData():this.errorMessage="Failed to set valve duty cycle."}catch(t){throw this.errorMessage="Failed to set valve duty cycle.",t}},async setValveCalibrationAction(e){try{(await a.post("/set-valve-calibration",e)).data.success?await this.fetchDeviceData():this.errorMessage="Failed to save valve calibration."}catch(t){throw this.errorMessage="Failed to save valve calibration.",t}},async measureStirrerSpeeds(){try{const e=await a.put("/measure-stirrer-speeds");if(e.data.success)return e.data;throw new Error(e.data.message||"Failed to measure stirrer speeds")}catch(e){throw this.errorMessage=e.message||"Failed to measure stirrer speeds",e}},async runSimulation(e,t=24){try{return(await a.put(`/cultures/${e}/run-simulation?simulation_hours=${t}`)).data}catch(s){throw this.errorMessage=s.message||`Failed to run simulation for vial ${e}`,s}},async setODScalingFactorAction({vial:e,scalingFactor:t}){try{(await a.post("/set-od-scaling-factor",{vial:e,scaling_factor:t})).data.success?await this.fetchDeviceData():this.errorMessage="Failed to set OD scaling factor."}catch(s){throw this.errorMessage="Failed to set OD scaling factor.",s}}}});export{d as u};
