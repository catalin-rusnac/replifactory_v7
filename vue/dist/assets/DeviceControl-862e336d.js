import{x as we,C as Se,z as pe,D as Je,g as I,h as ee,E as xe,B as re,G as fe,H as be,I as $e,_ as J,s as Y,c as K,o as l,a as r,b as o,F as U,d as G,t as T,n as z,J as le,K as se,e as Z,p as k,f as L,L as ye,r as B,j as P,i as N,k as V,M as he,N as Qe,l as ne,O as Ze,P as Xe,m as Ce,w as ie,Q as ge}from"./index-9c31674f.js";import{C as ce,B as Ye,S as et,a as tt,b as Oe,L as Ie,p as Pe,c as Ee,d as Ae,u as X,e as at,P as nt}from"./chart-b1750f99.js";/* empty css              */const Fe={data:{type:Object,required:!0},options:{type:Object,default:()=>({})},plugins:{type:Array,default:()=>[]},datasetIdKey:{type:String,default:"label"},updateMode:{type:String,default:void 0}},ot={ariaLabel:{type:String},ariaDescribedby:{type:String}},lt={type:{type:String,required:!0},destroyDelay:{type:Number,default:0},...Fe,...ot},st=Je[0]==="2"?(d,n)=>Object.assign(d,{attrs:n}):(d,n)=>Object.assign(d,n);function ae(d){return $e(d)?fe(d):d}function it(d){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:d;return $e(n)?new Proxy(d,{}):d}function rt(d,n){const t=d.options;t&&n&&Object.assign(t,n)}function Me(d,n){d.labels=n}function Ve(d,n,t){const h=[];d.datasets=n.map(b=>{const c=d.datasets.find(_=>_[t]===b[t]);return!c||!b.data||h.includes(c)?{...b}:(h.push(c),Object.assign(c,b),c)})}function ct(d,n){const t={labels:[],datasets:[]};return Me(t,d.labels),Ve(t,d.datasets,n),t}const ut=we({props:lt,setup(d,n){let{expose:t,slots:h}=n;const b=I(null),c=Se(null);t({chart:c});const _=()=>{if(!b.value)return;const{type:$,data:f,options:s,plugins:v,datasetIdKey:e}=d,u=ct(f,e),S=it(u,f);c.value=new ce(b.value,{type:$,data:S,options:{...s},plugins:v})},w=()=>{const $=fe(c.value);$&&(d.destroyDelay>0?setTimeout(()=>{$.destroy(),c.value=null},d.destroyDelay):($.destroy(),c.value=null))},A=$=>{$.update(d.updateMode)};return ee(_),xe(w),re([()=>d.options,()=>d.data],($,f)=>{let[s,v]=$,[e,u]=f;const S=fe(c.value);if(!S)return;let y=!1;if(s){const p=ae(s),C=ae(e);p&&p!==C&&(rt(S,p),y=!0)}if(v){const p=ae(v.labels),C=ae(u.labels),E=ae(v.datasets),M=ae(u.datasets);p!==C&&(Me(S.config.data,p),y=!0),E&&E!==M&&(Ve(S.config.data,E,d.datasetIdKey),y=!0)}y&&be(()=>{A(S)})},{deep:!0}),()=>pe("canvas",{role:"img",ariaLabel:d.ariaLabel,ariaDescribedby:d.ariaDescribedby,ref:b},[pe("p",{},[h.default?h.default():""])])}});function Le(d,n){return ce.register(n),we({props:Fe,setup(t,h){let{expose:b}=h;const c=Se(null),_=w=>{c.value=w==null?void 0:w.chart};return b({chart:c}),()=>pe(ut,st({ref:_},{type:d,...t}))}})}const dt=Le("bar",Ye),vt=Le("scatter",et);const pt={class:"pump-data"},ft={class:"iteration-rotation-wrapper"},bt={class:"iteration"},gt={class:"rotation"},mt=["onClick"],_t={key:0},yt={key:1},ht=["onUpdate:modelValue","onChange"],Ct={class:"chart-container"},kt={key:0,class:"calibration-section"},Dt={__name:"PumpCalibration",props:{pumpId:{type:Number,required:!0}},setup(d){ce.register(tt,Oe,Ie,Pe,Ee,Ae);const n=d,t=X(),{calibrationModeEnabled:h,pumps:b,valves:c}=Y(t),_=I({datasets:[{data:[]}]}),w=I({responsive:!0,devicePixelRatio:4,maintainAspectRatio:!1,plugins:{legend:{display:!1}},backgroundColor:"rgba(0, 140, 186, 0.3)",layout:{padding:{top:20}},scales:{x:{title:{display:!0,text:"rotations"}},y:{title:{display:!0,text:"mL / rotation"},beginAtZero:!1,suggestedMin:.1,suggestedMax:.22}}}),A=I({}),$=I([{rotations:1,iterations:50,total_ml:NaN},{rotations:5,iterations:10,total_ml:NaN},{rotations:10,iterations:5,total_ml:NaN},{rotations:50,iterations:1,total_ml:NaN}]),f=K(()=>{var p,C;return((C=(p=b.value)==null?void 0:p.calibration)==null?void 0:C[n.pumpId])||{}});function s(){return{labels:Object.keys(f.value),datasets:[{label:null,data:Object.values(f.value),fill:!1,borderColor:"rgb(75, 192, 192)",tension:.1}]}}function v(){_.value=s()}function e(p){if(!Object.values(c.value.states).some(E=>E==="open")){alert("At least one valve must be open to start the pump");return}A.value[p]=!A.value[p],A.value[p]?y($.value[p]):t.setPartStateAction({devicePart:"pumps",partIndex:n.pumpId,newState:"stopped"})}function u(p){A.value[p]=!1}function S(p){p.total_ml&&(t.setPartCalibrationAction({devicePart:"pumps",partIndex:n.pumpId,newCalibration:{...f.value,[p.rotations]:p.total_ml/p.rotations/p.iterations}}),A.value[p]=!1)}function y(p){alert(`Pumping ${p.rotations} rotations ${p.iterations} times. Please blank the scale`),t.startPumpCalibrationSequence({pumpId:n.pumpId,rotations:p.rotations,iterations:p.iterations}).then(()=>{u(p);const C=parseFloat(prompt("Enter total mL pumped"));isNaN(C)||(p.total_ml=C,S(p))})}return ee(()=>{f.value&&v(),$.value.forEach(p=>{p.total_ml=(f.value[p.rotations]||0)*p.rotations*p.iterations,p.total_ml=p.total_ml?p.total_ml.toFixed(2):""})}),re(f,()=>{v()},{deep:!0}),(p,C)=>(l(),r("div",pt,[o("table",null,[C[1]||(C[1]=o("thead",null,[o("tr",null,[o("th",null,"Calibration Sequence"),o("th"),o("th",null,"Volume (mL)")])],-1)),o("tbody",null,[(l(!0),r(U,null,G($.value,(E,M)=>(l(),r("tr",{key:M},[o("td",null,[o("div",ft,[o("div",bt,T(E.iterations),1),C[0]||(C[0]=o("div",{class:"multiplier"},"x",-1)),o("div",gt,T(E.rotations)+" rots",1)])]),o("td",null,[o("button",{onClick:m=>e(M),class:z([A.value[M]?"stop-button":"",A.value[M]===!1&&$.value[M].total_ml?"restart-button":""])},[A.value[M]?(l(),r("span",_t,"Stop")):(l(),r("span",yt,"Start"))],10,mt)]),o("td",null,[le(o("input",{"onUpdate:modelValue":m=>E.total_ml=m,onChange:m=>S(E),type:"float"},null,40,ht),[[se,E.total_ml]])])]))),128))])]),o("div",Ct,[_.value.datasets[0].data.length>0?(l(),Z(k(dt),{key:0,id:"pump-calibration-chart",options:w.value,class:"pump-calibration-chart",data:_.value},null,8,["options","data"])):L("",!0)]),k(h)?(l(),r("div",kt)):L("",!0)]))}},wt=J(Dt,[["__scopeId","data-v-6558f4be"]]);const St={key:0,class:"pump-controls"},xt={key:1},$t={class:"pump-input"},Ot={key:1},It={__name:"PumpControl",setup(d){const n=X(),{pumps:t,valves:h,calibrationModeEnabled:b}=Y(n),c={1:"MAIN",2:"DRUG",3:"MISSING!!!",4:"WASTE"},_=ye({1:null,2:null,3:null,4:null}),w=ye({1:null,2:null,3:null,4:null});ee(()=>{t.value||n.fetchDeviceData()});async function A(e){if(t.value.states[e]==="running"){await n.setPartStateAction({devicePart:"pumps",partIndex:e,newState:"stopped"});return}if(!Object.values(h.value.states).some(y=>y==="open")){alert("At least one valve must be open to start the pump");return}const S=parseFloat(w[e]);if(!S){alert("Please set the volume before starting the pump");return}try{await n.setPartStateAction({devicePart:"pumps",partIndex:e,newState:"running",input:{volume:S}})}catch(y){console.error(y)}finally{await n.setPartStateAction({devicePart:"pumps",partIndex:e,newState:"stopped"})}}function $(e,u){w[u]=e;const S=parseFloat(w[u]);isNaN(S)?_[u]="":_[u]=s(S,u).toFixed(2)}function f(e,u){_[u]=e;const S=parseFloat(_[u]);isNaN(S)?w[u]="":w[u]=v(S,u)}function s(e,u){const S=t.value.calibration[u],y=Object.entries(S).map(([q,te])=>[parseInt(q),te]).sort((q,te)=>q[0]-te[0]);if(e>=y[y.length-1][0]*y[y.length-1][1])return e/y[y.length-1][1];let p=y[0],C=y[y.length-1];for(let q=0;q<y.length-1;q++)if(e>=y[q][0]*y[q][1]&&e<=y[q+1][0]*y[q+1][1]){p=y[q],C=y[q+1];break}const E=p[0]*p[1],M=C[0]*C[1],m=(e-E)/(M-E),F=p[1]+(C[1]-p[1])*m;return e/F}function v(e,u){const S=t.value.calibration[u],y=Object.entries(S).map(([m,F])=>[parseInt(m),F]).sort((m,F)=>m[0]-F[0]);if(e>=y[y.length-1][0])return(e*y[y.length-1][1]).toFixed(2);let p=y[0],C=y[y.length-1];for(let m=0;m<y.length-1;m++)if(e>=y[m][0]&&e<=y[m+1][0]){p=y[m],C=y[m+1];break}const E=(e-p[0])/(C[0]-p[0]),M=p[1]+(C[1]-p[1])*E;return(e*M).toFixed(2)}return(e,u)=>{const S=B("v-progress-circular"),y=B("v-btn"),p=B("v-text-field");return k(t)&&k(t).states?(l(),r("div",St,[(l(),r(U,null,G([1,2,4],C=>o("div",{class:"pump",key:C},[P(y,{class:z(["pump-button",{"stop-button":k(t).states[C]==="running"}]),onClick:E=>A(C)},{default:N(()=>[k(t).states[C]==="running"?(l(),Z(S,{key:0,indeterminate:"",color:"white",class:"spinner-custom"})):(l(),r("span",xt,[V(T(c[C]),1),u[0]||(u[0]=o("br",null,null,-1)),u[1]||(u[1]=V("pump"))]))]),_:2},1032,["class","onClick"]),o("div",$t,[P(p,{label:"Volume (mL)",type:"number",dense:"",modelValue:w[C],"onUpdate:modelValue":[E=>w[C]=E,E=>$(E,C)]},null,8,["modelValue","onUpdate:modelValue"]),k(b)?(l(),Z(p,{key:0,label:"Rotations",type:"number",dense:"",modelValue:_[C],"onUpdate:modelValue":[E=>_[C]=E,E=>f(E,C)]},null,8,["modelValue","onUpdate:modelValue"])):L("",!0),k(b)?(l(),Z(wt,{key:1,pumpId:C},null,8,["pumpId"])):L("",!0)])])),64))])):(l(),r("div",Ot," Loading pump data... "))}}},Pt=J(It,[["__scopeId","data-v-dc27ed63"]]);const Et={class:"valve-calibration"},At={class:"warning-header"},Ft={key:0,class:"loading-state"},Mt={key:1,class:"calibration-controls"},Vt={class:"slider-container"},Lt={class:"slider-label"},Nt={class:"value"},Tt={class:"slider-container"},Rt={class:"slider-label"},Ut={class:"value"},Bt={class:"valve-controls"},qt={__name:"ValveCalibration",props:{valveId:{type:Number,required:!0}},setup(d){const n=d,t=X(),{valves:h}=Y(t),b=I(.03),c=I(.12),_=I(!1),w=I(!0);re(h,v=>{var e,u;v&&(b.value=((e=v.duty_cycle_open)==null?void 0:e[n.valveId])??.03,c.value=((u=v.duty_cycle_closed)==null?void 0:u[n.valveId])??.12),w.value=!1},{immediate:!0}),ee(async()=>{try{await t.fetchDeviceData()}catch(v){console.error("Error initializing valve calibration:",v),w.value=!1}});async function A(v){_.value=!0;try{await t.setPartStateAction({devicePart:"valves",partIndex:n.valveId,newState:v?"open":"closed",input:{dutyCycle:v?b.value:c.value}})}catch(e){console.error("Error operating valve:",e)}finally{_.value=!1}}async function $(){try{await he.post("/set-valve-duty-cycle-open",{valve:n.valveId,duty_cycle:b.value})}catch(v){console.error("Error updating open duty cycle:",v)}}async function f(){try{await he.post("/set-valve-duty-cycle-closed",{valve:n.valveId,duty_cycle:c.value})}catch(v){console.error("Error updating closed duty cycle:",v)}}async function s(){b.value=.03,c.value=.12,await Promise.all([$(),f()])}return(v,e)=>{const u=B("v-icon"),S=B("v-progress-circular"),y=B("v-slider"),p=B("v-btn");return l(),r("div",Et,[o("div",At,[P(u,{color:"error",size:"large"},{default:N(()=>e[4]||(e[4]=[V("warning")])),_:1}),e[5]||(e[5]=o("h2",null,"Warning! Valve Calibration Mode",-1))]),w.value?(l(),r("div",Ft,[P(S,{indeterminate:"",color:"primary"}),e[6]||(e[6]=o("span",null,"Loading valve data...",-1))])):(l(),r("div",Mt,[o("div",Vt,[o("div",Lt,[e[7]||(e[7]=o("span",null,"Open Duty Cycle",-1)),o("span",Nt,T(b.value.toFixed(3)),1)]),P(y,{modelValue:b.value,"onUpdate:modelValue":[e[0]||(e[0]=C=>b.value=C),$],min:.02,max:.04,step:.001,color:"primary","track-color":"grey","thumb-label":""},null,8,["modelValue"])]),o("div",Tt,[o("div",Rt,[e[8]||(e[8]=o("span",null,"Closed Duty Cycle",-1)),o("span",Ut,T(c.value.toFixed(3)),1)]),P(y,{modelValue:c.value,"onUpdate:modelValue":[e[1]||(e[1]=C=>c.value=C),f],min:.11,max:.13,step:.001,color:"primary","track-color":"grey","thumb-label":""},null,8,["modelValue"])]),o("div",Bt,[P(p,{color:"success",onClick:e[2]||(e[2]=C=>A(!0)),loading:_.value,disabled:_.value},{default:N(()=>e[9]||(e[9]=[V(" Open Valve ")])),_:1},8,["loading","disabled"]),P(p,{color:"error",onClick:e[3]||(e[3]=C=>A(!1)),loading:_.value,disabled:_.value},{default:N(()=>e[10]||(e[10]=[V(" Close Valve ")])),_:1},8,["loading","disabled"]),P(p,{color:"primary",onClick:s},{default:N(()=>e[11]||(e[11]=[V(" Reset Defaults ")])),_:1})])]))])}}},jt=J(qt,[["__scopeId","data-v-42b239cf"]]);const Gt={class:"valve-controls"},Kt=["onClick","disabled"],zt={key:0,class:"spinner-border spinner-custom",role:"status"},Wt={key:1},Ht={__name:"ValveControl",setup(d){const n=X(),{valves:t}=Y(n),h=I({}),b=new(window.AudioContext||window.webkitAudioContext),c=I(!1),_=I(null);function w(f){const s=f==="open"?500:300,v=f==="open"?300:500,e=b.createOscillator();e.type="sine";const u=b.createGain();return u.gain.setValueAtTime(.1,b.currentTime),e.connect(u),u.connect(b.destination),e.frequency.setValueAtTime(s,b.currentTime),e.frequency.linearRampToValueAtTime(v,b.currentTime+.3),e.start(),e.stop(b.currentTime+.3),e}async function A(f){const s=t.value.states[f];if(h.value[f])return;h.value={...h.value,[f]:!0};const v=w(s);try{await n.setPartStateAction({devicePart:"valves",partIndex:f,newState:s==="open"?"closed":"open"}),v.stop()}catch(e){console.error(e)}finally{h.value={...h.value,[f]:!1}}}function $(f,s){if(s.ctrlKey&&s.shiftKey){_.value=f,c.value=!0;return}A(f)}return(f,s)=>{const v=B("v-dialog");return l(),r(U,null,[o("div",Gt,[(l(),r(U,null,G(7,e=>o("button",{class:z(["btn",{"btn-danger":k(t).states[e]==="closed"&&!h.value[e],"btn-success":k(t).states[e]==="open"&&!h.value[e],"btn-warning":h.value[e]}]),key:e,onClick:u=>$(e,u),disabled:h.value[e]},[h.value[e]?(l(),r("div",zt)):(l(),r("span",Wt,"Valve "+T(e),1))],10,Kt)),64))]),P(v,{modelValue:c.value,"onUpdate:modelValue":s[1]||(s[1]=e=>c.value=e),"max-width":"600"},{default:N(()=>[c.value?(l(),Z(jt,{key:0,valveId:_.value,onClose:s[0]||(s[0]=e=>c.value=!1)},null,8,["valveId"])):L("",!0)]),_:1},8,["modelValue"])],64)}}},Jt=J(Ht,[["__scopeId","data-v-a341c808"]]);const Qt={class:"elements-container"},Zt={class:"stirrer-name"},Xt={key:0},Yt={style:{position:"relative",display:"inline-block"}},ea={style:{position:"relative",display:"inline-block"}},ta={class:"buttons-container"},ke=0,De=1,aa={__name:"StirrerCalibration",props:{stirrerId:{type:Number,required:!0}},setup(d){const n=d,t=I(null),h=I(null),b=I(null),c=new(window.AudioContext||window.webkitAudioContext);let _=null,w=null,A=null;const $=X(),{calibrationModeEnabled:f,stirrers:s}=Y($),v=K(()=>s.value&&s.value.states?s.value.states[n.stirrerId]:void 0);function e(M){$.setPartStateAction({devicePart:"stirrers",partIndex:n.stirrerId,newState:M})}function u(M){if(s.value&&s.value.states)for(let m=1;m<=7;m++)s.value.states[m]=M;$.setAllStirrersStateAction&&$.setAllStirrersStateAction(M)}function S(M,m){p(m.target.value)}function y(M,m){!s.value||!s.value.calibration||!s.value.calibration[n.stirrerId]||$.setPartCalibrationAction({devicePart:"stirrers",partIndex:n.stirrerId,newCalibration:{low:s.value.calibration[n.stirrerId].low,high:s.value.calibration[n.stirrerId].high}}).catch(F=>{console.error("Error updating stirrer calibration:",F)})}function p(M){_||(_=c.createOscillator(),w=c.createGain(),_.type="sine",w.gain.setValueAtTime(.1,c.currentTime),_.connect(w),w.connect(c.destination),_.start());const m=300+M*500;_.frequency.setValueAtTime(m,c.currentTime),A&&clearTimeout(A),A=setTimeout(C,200)}function C(){_&&(w.gain.exponentialRampToValueAtTime(.001,c.currentTime+.01),w.gain.setValueAtTime(.1,c.currentTime+.02),_.stop(c.currentTime+.02),_=null,w=null)}function E(M,m){(M==="high"&&v.value!=="high"||M==="low"&&v.value!=="low")&&(m.preventDefault(),ne("Enable stirrer to adjust speed",{type:"info"}))}return ee(()=>{window.addEventListener("resize",()=>{})}),Qe(()=>{window.removeEventListener("resize",()=>{})}),(M,m)=>(l(),r("div",{class:"stirrer-calibrator",ref_key:"container",ref:t},[o("div",Qt,[o("div",Zt,[o("header",null,"Stirrer "+T(d.stirrerId),1)]),k(f)&&k(s)&&k(s).calibration&&k(s).calibration[d.stirrerId]?(l(),r("div",Xt,[o("div",Yt,[le(o("input",{type:"range",class:z(["slider slider-high",[{active:v.value==="high"},{"slider-disabled":v.value!=="high"}]]),min:ke,max:De,step:.01,"onUpdate:modelValue":m[0]||(m[0]=F=>k(s).calibration[d.stirrerId].high=F),onInput:m[1]||(m[1]=F=>S("high",F)),onChange:m[2]||(m[2]=F=>y())},null,34),[[se,k(s).calibration[d.stirrerId].high,void 0,{number:!0}]]),v.value!=="high"?(l(),r("div",{key:0,class:"slider-overlay",onClick:m[3]||(m[3]=F=>E("high",F))})):L("",!0)]),o("div",ea,[le(o("input",{type:"range",class:z(["slider slider-low",[{active:v.value==="low"},{"slider-disabled":v.value!=="low"}]]),min:ke,max:De,step:.01,"onUpdate:modelValue":m[4]||(m[4]=F=>k(s).calibration[d.stirrerId].low=F),onInput:m[5]||(m[5]=F=>S("low",F)),onChange:m[6]||(m[6]=F=>y())},null,34),[[se,k(s).calibration[d.stirrerId].low,void 0,{number:!0}]]),v.value!=="low"?(l(),r("div",{key:0,class:"slider-overlay",onClick:m[7]||(m[7]=F=>E("low",F))})):L("",!0)])])):L("",!0),o("div",ta,[o("button",{class:z(["button button-high",{active:v.value==="high"}]),ref_key:"buttonHigh",ref:h,onClick:m[8]||(m[8]=F=>e("high")),onDblclick:m[9]||(m[9]=F=>u("high"))},"High",34),o("button",{class:z(["button button-low",{active:v.value==="low"}]),ref_key:"buttonLow",ref:b,onClick:m[10]||(m[10]=F=>e("low")),onDblclick:m[11]||(m[11]=F=>u("low"))},"Low",34),o("button",{class:z(["button button-off",{active:v.value==="stopped"}]),ref:"buttonOff",onClick:m[12]||(m[12]=F=>e("stopped")),onDblclick:m[13]||(m[13]=F=>u("stopped"))},"OFF",34)])])],512))}},na=J(aa,[["__scopeId","data-v-d01f6391"]]);const oa={name:"StirrerControl",components:{StirrerCalibration:na}},la={class:"stirrer-controls"};function sa(d,n,t,h,b,c){const _=B("StirrerCalibration");return l(),r("div",la,[(l(),r(U,null,G(7,w=>P(_,{key:w,stirrerId:w},null,8,["stirrerId"])),64))])}const ia=J(oa,[["render",sa],["__scopeId","data-v-6cada7fd"]]),ra={className:"single-chart-container"},ca={__name:"ODChart",props:{partId:{type:Number,required:!0}},setup(d){ce.register(Pe,Ee,Ae,at,Oe,Ie,nt);const n=d,t=X(),{ods:h}=Y(t),b=K(()=>{var f,s;return(s=(f=h.value)==null?void 0:f.calibration)==null?void 0:s[n.partId]}),c=K(()=>{var f,s;return(s=(f=h.value)==null?void 0:f.calibration_coefs)==null?void 0:s[n.partId]}),_=K(()=>{var f,s,v,e;return{od:(s=(f=h.value)==null?void 0:f.states)==null?void 0:s[n.partId],signal:(e=(v=h.value)==null?void 0:v.odsignals)==null?void 0:e[n.partId]}});function w(f,s,v){return-Math.log10(f/s)*v}const A=K(()=>{if(b.value&&typeof b.value=="object"&&c.value){const f=Object.entries(b.value).filter(([u,S])=>S!==null).map(([u,S])=>({x:Number(S),y:Number(u)})).sort((u,S)=>u.x-S.x);let s=Math.min(...f.map(u=>u.x)),v=Math.max(...f.map(u=>u.x));const e=[];s===v&&(s=0,v=50);for(let u=s;u<=v;u+=.1){const S=w(u,...c.value);e.push({x:u,y:S})}return{datasets:[{label:`Vial ${n.partId} Calibration OD`,data:f,borderColor:"#607ecb",backgroundColor:"rgba(83,158,255,0.64)"},{label:`Vial ${n.partId} Current OD`,data:[{x:_.value.signal,y:_.value.od}],pointRadius:5,backgroundColor:"rgba(255,1,60,0.64)"},{label:`Vial ${n.partId} Fit`,data:e,pointRadius:0,borderColor:"rgba(0,70,220,0.38)",borderWidth:2,showLine:!0,fill:!1,borderDash:[2,2]}]}}return{}}),$=K(()=>{var f,s;return{devicePixelRatio:4,responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},title:{display:!0,text:`Vial ${n.partId}`+(c.value?`
blank: ${(f=c.value[0])==null?void 0:f.toFixed(2)}, scaling: ${(s=c.value[1])==null?void 0:s.toFixed(2)}`:"")}},scales:{x:{title:{display:!0,text:"Signal (mV)"},suggestedMin:0},y:{title:{display:!0,text:"OD"},suggestedMax:1.5,suggestedMin:0}}}});return(f,s)=>(l(),r("div",ra,[P(k(vt),{data:A.value,options:$.value},null,8,["data","options"])]))}};I({show:!1,title:"",content:"",resolve:null});const ua={class:"guide-popup"},da={class:"guide-header"},va={__name:"ODGuide",setup(d){return(n,t)=>{const h=B("v-icon");return l(),r("div",{class:"guide-overlay",onClick:t[1]||(t[1]=Xe(b=>n.$emit("close"),["self"]))},[o("div",ua,[o("div",da,[t[3]||(t[3]=o("span",{class:"guide-title"},"OD Calibration Guide",-1)),o("button",{class:"guide-close",onClick:t[0]||(t[0]=b=>n.$emit("close"))},[P(h,null,{default:N(()=>t[2]||(t[2]=[V("mdi-close")])),_:1})])]),t[4]||(t[4]=Ze('<div class="guide-content" data-v-8d7af6ce><div class="guide-section" data-v-8d7af6ce><b class="section-title" data-v-8d7af6ce>What is Optical Density (OD)?</b><br data-v-8d7af6ce><span class="guide-text" data-v-8d7af6ce> Optical Density (OD) measures how much light is absorbed by a sample. The higher the OD, the more cells or particles are in the solution. </span></div><div class="guide-section" data-v-8d7af6ce><b class="section-title" data-v-8d7af6ce>Beer-Lambert Law and Scaling Factor</b><br data-v-8d7af6ce><span class="guide-text" data-v-8d7af6ce> The Beer-Lambert Law relates OD to the transmitted light signal: </span><br data-v-8d7af6ce><span class="formula" data-v-8d7af6ce> OD = -log₁₀(signal / blank_signal) </span><br data-v-8d7af6ce><span class="guide-text" data-v-8d7af6ce> In our devices, the light path is not a standard 1cm cuvette. The curved shape of the vial and the sensor design affect how light travels through the sample. This is corrected using a scaling factor: </span><br data-v-8d7af6ce><span class="formula" data-v-8d7af6ce> OD = -log₁₀(signal / blank_signal) * scaling </span><br data-v-8d7af6ce></div><div class="guide-section" data-v-8d7af6ce><b class="section-title" data-v-8d7af6ce>Calibration Process</b><div class="method-panel" data-v-8d7af6ce><div class="method-heading" data-v-8d7af6ce>Step 1: Measure OD₀ (Blank Signal)</div><div class="od-warning-box" data-v-8d7af6ce><b data-v-8d7af6ce>Important: OD₀ must be measured with a vial containing growth medium!</b><div class="od-warning-details" data-v-8d7af6ce> - Use the same growth medium that will be used in your experiment<br data-v-8d7af6ce> - The vial must be filled with liquid<br data-v-8d7af6ce> - A good blank signal should be above 20mV<br data-v-8d7af6ce> - If the signal is below 20mV, check for:<br data-v-8d7af6ce>   • Proper vial alignment<br data-v-8d7af6ce>   • Clean sensors and vials<br data-v-8d7af6ce>   • No obstructions in the light path </div></div></div><div class="method-panel" data-v-8d7af6ce><div class="method-heading" data-v-8d7af6ce>Step 2 (Optional): Measure additional OD values to calibrate the scaling factor</div><div class="option-container" data-v-8d7af6ce><div class="option-box" data-v-8d7af6ce><div class="method-subheading" data-v-8d7af6ce>Option A: Using Liquid Samples (Recommended)</div><ol class="guide-ol" data-v-8d7af6ce><li data-v-8d7af6ce>Prepare a vial with a known OD between 0.1 and 2.0: </li><li data-v-8d7af6ce>Insert this vial into each slot and measure its signal using the calibration table.</li><li data-v-8d7af6ce>The scaling factor will be automatically calculated from these measurements.</li><i data-v-8d7af6ce>Repeat with different OD values for increased accuracy.</i></ol></div><div class="option-box" data-v-8d7af6ce><div class="method-subheading" data-v-8d7af6ce>Option B: Using Semitransparent Sheets</div><ol class="guide-ol" data-v-8d7af6ce><li data-v-8d7af6ce>Determine the equivalent OD of one or more semitransparent sheets (using a solution which creates the same signal as the sheet inserted in the sensor)</li><li data-v-8d7af6ce>Place the sheet over all sensors at once</li><li data-v-8d7af6ce>Measure the signals and the scaling factor will be calculated automatically</li><i data-v-8d7af6ce>Note: This method is less accurate than using liquid samples</i></ol></div></div></div><div class="method-panel" data-v-8d7af6ce><div class="method-heading" data-v-8d7af6ce>Step 3: Final Check</div><div class="guide-text" data-v-8d7af6ce> Ideally, remeasure OD₀ just before starting the experiment. Small changes in the position of the vial and media composition can affect the signal. </div></div></div></div>',1))])])}}},pa=J(va,[["__scopeId","data-v-8d7af6ce"]]);const fa={class:"od-control-container"},ba=["onClick"],ga={key:0,class:"od-output-value"},ma={key:1,class:"od-output-value"},_a={key:2,class:"signal-output-value"},ya={key:3,class:"signal-output-value"},ha={key:0,class:"calibration-section"},Ca={class:"probe-table-outer-container",style:{"margin-bottom":"18px"}},ka={class:"table-controls"},Da={class:"mode-controls"},wa={class:"calibration-table-wrapper"},Sa={class:"calibration-table"},xa={key:0,style:{width:"36px"}},$a={class:"od-value-container"},Oa=["onDblclick"],Ia=["value","onInput","onBlur","onKeyup"],Pa=["title"],Ea={key:1,class:"signal-value"},Aa={key:1,class:"signal-value"},Fa={key:1,class:"measure-cell-container"},Ma=["onDblclick"],Va=["onDblclick"],La=["value","onInput","onBlur","onKeyup"],Na=["onClick","disabled","title"],Ta={key:0,class:"measure-button-content"},Ra={key:1,class:"measure-button-content"},Ua={key:0,style:{"text-align":"center",width:"36px",padding:"4px"}},Ba=["onClick","disabled"],qa={key:1,style:{width:"36px"}},ja={key:0},Ga={class:"scaling-factor-container"},Ka={class:"calibration-table"},za={class:"scaling-factor-row"},Wa=["title"],Ha=["onUpdate:modelValue"],Ja={key:1,class:"scaling-factor-value"},Qa={key:0,style:{width:"40px"}},Za={key:0,class:"chart-container"},Xa={__name:"ODControl",setup(d){const n=X(),{ods:t,calibrationModeEnabled:h}=Y(n),{openDialog:b}=ge(),c=[1,2,3,4,5,6,7],_=I(!1),w=I(!0),A=I(!1),$=I(!1),f=I({}),s=I({}),v=K(()=>{let i=new Set;if(t.value.calibration)for(let x in t.value.calibration)for(let g in t.value.calibration[x])i.add(g);return Array.from(i).sort((x,g)=>parseFloat(x)-parseFloat(g))}),e=K(()=>{if(!t.value.calibration)return[];const i=new Set;for(const a in t.value.calibration)for(const x in t.value.calibration[a])i.add(parseFloat(x));return Array.from(i).sort((a,x)=>a-x)}),u=I(new Set),S=K(()=>{const i=t.value.calibration_coefs||{};return c.map(a=>{var x;return((x=i[a])==null?void 0:x[1])??"—"})}),y=I([]);re(S,i=>{y.value=[...i]},{immediate:!0}),ee(()=>{n.fetchDeviceData(),document.addEventListener("click",p)}),xe(()=>{document.removeEventListener("click",p)});function p(i){if(H.value&&!i.target.closest(".calibration-signal")&&ue(H.value.vial,H.value.odValue),Q.value&&!i.target.closest(".od-value-input")){const a=e.value.indexOf(Q.value);a!==-1&&te(Q.value,a),Q.value=null}}async function C(i){try{const a=await n.measureDevicePart({devicePart:"ods",partIndex:i});await n.fetchDeviceData()}catch(a){throw console.error("Error measuring OD:",a),ne.error(a.message||"Failed to measure OD. Please try again."),a}}function E(i,a,x){s.value[a]||(s.value[a]={}),s.value[a][x]=parseFloat(i.target.value)}function M(i,a){if(s.value[i]&&s.value[i][a]!==void 0){t.value.calibration[i]||(t.value.calibration[i]={});const x=s.value[i][a];isNaN(s.value[i][a])&&delete t.value.calibration[i][a],n.updateODCalibrationValueAction({od:a,vial:i,newValue:x}).catch(g=>{console.error(`Error updating calibration for vial ${i}:`,g)}),delete s.value[i][a]}}function m(i,a){return s.value[i]&&s.value[i][a]!==void 0?s.value[i][a]:t.value.calibration&&t.value.calibration[i]&&t.value.calibration[i][a]!==void 0?t.value.calibration[i][a]:""}function F(i,a){if(!t.value.calibration||!t.value.calibration[i]||t.value.calibration[i][a]===void 0)return{background:""};const x=parseFloat(t.value.calibration[i][a]),g=5,O=40;let D;if(x<=0)D=g;else{const R=Math.log(10),oe=Math.log(1e3),He=(Math.log(Math.max(10,Math.min(1e3,x)))-R)/(oe-R);D=g+He*(O-g)}return{background:`rgba(255, 100, 100, ${D/100})`}}function q(i){if(i==null)return"";const a=parseFloat(i);if(isNaN(a))return"";const x=.02,g=.25,O=Math.max(0,Math.min(4,a)),D=Math.log(O+1)/Math.log(5),R=x+D*(g-x);return`background: linear-gradient(to right, rgba(255, 235, 156, ${R}), rgba(255, 235, 156, ${R*.6}))`}async function te(i,a,x){if(f.value[a]!==void 0){const g=f.value[a];if(e.value.some((D,R)=>R!==a&&parseFloat(D)===parseFloat(g))&&!await b({title:"Duplicate OD Value",message:`An OD probe value of ${g} already exists. Are you sure you want to overwrite?`,showCancel:!0})){delete f.value[a];return}e.value[a]=g,delete f.value[a];try{for(let D in t.value.calibration){const R=t.value.calibration[D],oe=JSON.parse(JSON.stringify(R));R[i]!==void 0&&(delete oe[i],oe[g]=R[i],await n.setPartCalibrationAction({devicePart:"ods",partIndex:D,newCalibration:oe}))}await n.fetchDeviceData()}catch(D){console.error("Error updating calibration:",D),ne.error("Failed to update calibration values")}}}function Ne(i,a){console.log("handleProbeValueInput",i.target.value),f.value[a]=parseFloat(i.target.value)}function Te(){A.value=!0}function Re(){A.value=!1}function Ue(){if(!e.value.length)return .1;const i=Math.max(...e.value);return parseFloat((i+.1).toFixed(2))}async function Be(){const i=Ue();for(const a of c)t.value.calibration[a]||(t.value.calibration[a]={}),t.value.calibration[a][i]=null,await n.setPartCalibrationAction({devicePart:"ods",partIndex:a,newCalibration:t.value.calibration[a]});await n.fetchDeviceData()}async function qe(i){const a=v.value[i];u.value.add(a);for(const x of c)t.value.calibration[x]&&(delete t.value.calibration[x][a],await n.setPartCalibrationAction({devicePart:"ods",partIndex:x,newCalibration:t.value.calibration[x]}));await n.fetchDeviceData(),u.value.delete(a)}const j={VIEW:"view",MEASURE:"measure"},W=I(j.VIEW);K(()=>({"view-mode":W.value===j.VIEW,"measure-mode":W.value===j.MEASURE}));async function je(i,a){try{await n.measureDevicePart({devicePart:"ods",partIndex:i});const x=t.value.odsignals[i];await n.updateODCalibrationValueAction({od:a,vial:i,newValue:x}),await n.fetchDeviceData()}catch(x){console.error("Error measuring cell:",x)}}const H=I(null),Ge=I(null);function _e(i,a){H.value={vial:i,odValue:a},be(()=>{const x=document.querySelector(".calibration-signal");x&&x.focus()})}function ue(i,a){s.value[i]&&s.value[i][a]!==void 0&&M(i,a),H.value=null}function Ke(){if(H.value=null,H.value){const{vial:i,odValue:a}=H.value;s.value[i]&&delete s.value[i][a]}}const Q=I(null);function ze(i,a){Q.value=i,be(()=>{const x=document.querySelector(".od-value-input");x&&x.focus()})}function We(){if(Q.value=null,Q.value){const i=e.value.indexOf(Q.value);i!==-1&&f.value[i]&&delete f.value[i]}}const de=(i,a)=>({icon:"",color:"#90caf9",tooltip:"Scaling factor"}),ve=i=>typeof i!="number"?{icon:"mdi-help-circle-outline",color:"grey",tooltip:"No signal value available"}:i>=20?{icon:"mdi-check-circle",color:"#4caf50",tooltip:"Signal value within expected range"}:i>=12?{icon:"mdi-alert-circle",color:"#ffc107",tooltip:"Signal value slightly low. Consider recalibrating"}:{icon:"mdi-close-circle",color:"#f44336",tooltip:"Signal value too low. Check OD sensor"};return(i,a)=>{const x=B("v-icon");return l(),r(U,null,[o("div",fa,[(l(!0),r(U,null,G(k(t).states,(g,O)=>(l(),r("div",{class:"elements-container",key:O},[o("button",{class:"od-button",onClick:D=>C(O)},[o("span",null,"OD "+T(O),1)],8,ba),k(t).states&&k(t).states[O]!==void 0&&k(t).states[O]!==0?(l(),r("span",ga,T(parseFloat(k(t).states[O].toFixed(2))),1)):(l(),r("span",ma,"---")),a[1]||(a[1]=o("div",{style:{height:"0.5px"}},null,-1)),k(t).odsignals&&k(t).odsignals[O]!==void 0&&k(t).odsignals[O]!==0?(l(),r("span",_a,"("+T(parseFloat(k(t).odsignals[O].toFixed(2)))+"mV)",1)):(l(),r("span",ya,"(---)"))]))),128))]),k(h)?(l(),r("div",ha,[o("div",Ca,[a[6]||(a[6]=o("div",{style:{display:"flex","align-items":"center","margin-bottom":"8px"}},null,-1)),o("div",ka,[a[5]||(a[5]=o("div",{style:{flex:"1"}},null,-1)),o("div",Da,[o("button",{class:z(["control-button mode-toggle",{active:W.value===j.MEASURE}]),onClick:a[0]||(a[0]=g=>W.value=W.value===j.MEASURE?j.VIEW:j.MEASURE)},[P(x,null,{default:N(()=>a[2]||(a[2]=[V("mdi-pencil")])),_:1}),a[3]||(a[3]=V(" Edit "))],2)]),o("button",{class:"control-button help-button",onClick:Te},[P(x,null,{default:N(()=>a[4]||(a[4]=[V("mdi-help-circle-outline")])),_:1})])])]),a[15]||(a[15]=o("div",{class:"calibration-controls"},null,-1)),o("div",wa,[o("table",Sa,[o("thead",null,[o("tr",null,[a[7]||(a[7]=o("th",{style:{width:"110px"}},"OD Value",-1)),(l(),r(U,null,G(c,g=>o("th",{key:g,style:{width:"90px"}},"Vial "+T(g),1)),64)),_.value?(l(),r("th",xa)):L("",!0)])]),o("tbody",null,[(l(!0),r(U,null,G(v.value,(g,O)=>(l(),r("tr",{key:g,class:z({"od-zero-row":parseFloat(g)===0})},[o("td",{style:Ce([{width:"110px"},q(g)])},[o("div",$a,[!Q.value||Q.value!==g?(l(),r("span",{key:0,class:"od-value-display",onDblclick:D=>ze(g),title:"Double click to edit"},T(O<e.value.length?f.value[O]!==void 0?f.value[O]:e.value[O]:g),41,Oa)):(l(),r("input",{key:1,value:f.value[O]!==void 0?f.value[O]:e.value[O],onInput:D=>Ne(D,O),onBlur:D=>te(g,O),onKeyup:[ie(D=>te(g,O),["enter"]),ie(We,["esc"])],type:"number",step:"0.1",class:"od-value-input",ref_for:!0,ref:"odValueInput"},null,40,Ia))])],4),(l(),r(U,null,G(c,D=>o("td",{key:D,class:z({"has-data":k(t).calibration&&k(t).calibration[D]&&k(t).calibration[D][g]!==void 0}),style:Ce({background:F(D,g).background})},[W.value===j.VIEW?(l(),r(U,{key:0},[k(t).calibration&&k(t).calibration[D]&&k(t).calibration[D][g]!==void 0&&k(t).calibration[D][g]!==null?(l(),r(U,{key:0},[parseFloat(g)===0?(l(),r("div",{key:0,class:"signal-value-with-status",title:ve(k(t).calibration[D][g]).tooltip},[V(T(k(t).calibration[D][g].toFixed(2))+" ",1),P(x,{color:ve(k(t).calibration[D][g]).color,size:"small",style:{"margin-left":"4px"}},{default:N(()=>[V(T(ve(k(t).calibration[D][g]).icon),1)]),_:2},1032,["color"])],8,Pa)):(l(),r("div",Ea,T(k(t).calibration[D][g].toFixed(2)),1))],64)):(l(),r("div",Aa,"---"))],64)):W.value===j.MEASURE?(l(),r("div",Fa,[k(t).calibration&&k(t).calibration[D]&&k(t).calibration[D][g]!==void 0&&k(t).calibration[D][g]!==null?(l(),r("span",{key:0,class:"signal-value measure-background-value",onDblclick:R=>_e(D,g),title:"Double click to edit"},T(parseFloat(k(t).calibration[D][g]).toFixed(2))+"mV ",41,Ma)):(l(),r("span",{key:1,class:"signal-value measure-background-value empty-value",onDblclick:R=>_e(D,g),title:"Double click to edit"}," ——— ",40,Va)),H.value&&H.value.vial===D&&H.value.odValue===g?(l(),r("input",{key:2,value:m(D,g),onInput:R=>E(R,D,g),onBlur:R=>ue(D,g),onKeyup:[ie(R=>ue(D,g),["enter"]),ie(Ke,["esc"])],type:"number",class:"calibration-signal",ref_for:!0,ref_key:"editingInput",ref:Ge},null,40,La)):L("",!0),o("button",{class:"measure-cell-button",onClick:R=>je(D,g),disabled:$.value,title:`Calibrate OD ${parseFloat(g).toFixed(2)} signal in vial ${D} (measure now)`},[$.value?(l(),r("span",Ta,a[8]||(a[8]=[o("span",{class:"loading-spinner"},null,-1)]))):(l(),r("span",Ra,[P(x,null,{default:N(()=>a[9]||(a[9]=[V("mdi-camera-metering-center")])),_:1})]))],8,Na)])):L("",!0)],6)),64)),W.value===j.MEASURE&&parseFloat(v.value[O])!==0?(l(),r("td",Ua,[o("button",{class:"delete-od-row",onClick:D=>qe(O),disabled:u.value.has(v.value[O]),title:"Delete row"},[P(x,null,{default:N(()=>a[10]||(a[10]=[V("mdi-delete")])),_:1})],8,Ba)])):W.value===j.MEASURE?(l(),r("td",qa)):L("",!0)],2))),128)),W.value===j.MEASURE?(l(),r("tr",ja,[o("td",null,[o("button",{class:"add-od-probe-table",onClick:Be},[P(x,null,{default:N(()=>a[11]||(a[11]=[V("mdi-plus")])),_:1}),a[12]||(a[12]=V(" Add "))])]),(l(),r(U,null,G(c,g=>o("td",{key:"add-row-"+g})),64)),a[13]||(a[13]=o("td",null,null,-1))])):L("",!0)])])]),o("div",Ga,[o("table",Ka,[o("tbody",null,[o("tr",za,[a[14]||(a[14]=o("th",{class:"scaling-factor-label"},"Scaling Factor",-1)),(l(!0),r(U,null,G(y.value,(g,O)=>(l(),r("th",{key:"sf-head-"+O,class:"scaling-factor-cell",title:de().tooltip},[_.value?le((l(),r("input",{key:0,type:"number",step:"0.01",min:"0.1","onUpdate:modelValue":D=>y.value[O]=D,style:{width:"60px","text-align":"center",background:"#23272e",color:"#90caf9",border:"1px solid #444","border-radius":"4px"}},null,8,Ha)),[[se,y.value[O],void 0,{number:!0}]]):(l(),r("div",Ja,[V(T(typeof g=="number"?g.toFixed(2):g)+" ",1),P(x,{color:de().color,size:"small",style:{"margin-left":"4px"}},{default:N(()=>[V(T(de(g,O+1).icon),1)]),_:2},1032,["color"])]))],8,Wa))),128)),W.value===j.MEASURE?(l(),r("th",Qa)):L("",!0)])])])]),w.value?(l(),r("div",Za,[(l(),r(U,null,G(c,g=>P(ca,{partId:g,key:g},null,8,["partId"])),64))])):L("",!0)])):L("",!0),A.value?(l(),Z(pa,{key:1,onClose:Re})):L("",!0)],64)}}},Ya=J(Xa,[["__scopeId","data-v-d1818801"]]);const me=X(),{leds:en}=Y(me);ee(()=>{en.value||me.fetchDeviceData()});const tn={name:"SetLEDColor",data(){return{vials:[1,2,3,4,5,6,7],ledColors:{1:{red:0,green:0,blue:0,color:"#000000"},2:{red:0,green:0,blue:0,color:"#000000"},3:{red:0,green:0,blue:0,color:"#000000"},4:{red:0,green:0,blue:0,color:"#000000"},5:{red:0,green:0,blue:0,color:"#000000"},6:{red:0,green:0,blue:0,color:"#000000"},7:{red:0,green:0,blue:0,color:"#000000"}}}},methods:{async setLEDColor(d,n){if(n.shiftKey){const{red:t,green:h,blue:b}=this.ledColors[d];for(const c of this.vials)this.ledColors[c].red=t,this.ledColors[c].green=h,this.ledColors[c].blue=b,this.ledColors[c].color=this.ledColors[d].color,await this.setIndividualLEDColor(c)}else await this.setIndividualLEDColor(d)},async setIndividualLEDColor(d){const{red:n,green:t,blue:h}=this.ledColors[d];try{console.log("Setting color for vial",d,"to",n,t,h),await me.setLedColor(d,n,t,h)}catch(b){console.error(`Failed to set color for vial ${d}:`,b),alert(`Error setting color for vial ${d}`)}},updateColor(d){const n=this.ledColors[d].color,{r:t,g:h,b}=this.hexToRgb(n);this.ledColors[d].red=t/255,this.ledColors[d].green=h/255,this.ledColors[d].blue=b/255},hexToRgb(d){const n=parseInt(d.slice(1),16);return{r:n>>16&255,g:n>>8&255,b:n&255}}}},an={class:"rgb-control-container"},nn={class:"color-selector"},on=["onUpdate:modelValue","onInput"],ln=["onClick"];function sn(d,n,t,h,b,c){return l(),r("div",an,[(l(!0),r(U,null,G(b.vials,_=>(l(),r("div",{class:"vial-container",key:_},[o("div",nn,[o("label",null,T("Vial "+_),1),le(o("input",{type:"color","onUpdate:modelValue":w=>b.ledColors[_].color=w,onInput:w=>c.updateColor(_)},null,40,on),[[se,b.ledColors[_].color]])]),o("button",{class:"set-color-button",onClick:w=>c.setLEDColor(_,w)},"Set",8,ln)]))),128))])}const rn=J(tn,[["render",sn],["__scopeId","data-v-0f12a494"]]);const cn={class:"device-configs"},un={class:"config-actions"},dn={key:0,class:"error-message"},vn={key:1,class:"config-list mt-4"},pn={key:0},fn={key:1,class:"text-muted"},bn={__name:"DeviceConfigs",setup(d){const n=X(),{openDialog:t}=ge(),h=I([]),b=I(""),c=I(!1),_=I(null),w=I(null);async function A(){b.value="",c.value=!0;try{const v=await n.listDeviceConfigs();h.value=(v||[]).sort((e,u)=>u.localeCompare(e))}catch{b.value="Failed to list device configs."}finally{c.value=!1}}async function $(v){b.value="",_.value=v;try{await n.loadDeviceConfig(v)}catch{b.value="Failed to load device config."}finally{_.value=null}}const f=async()=>{b.value="";try{await n.saveCalibrationToBackend(),ne.success("Calibration checkpoint saved!")}catch{b.value="Failed to save device configs."}};function s(v){w.value=v,t({title:"Load checkpoint?",message:"Replace default config with checkpoint?"}).then(async e=>{e&&(await $(w.value),w.value=null)})}return(v,e)=>{const u=B("v-icon"),S=B("v-btn"),y=B("v-list-item"),p=B("v-list");return l(),r("div",cn,[o("div",un,[P(S,{color:"success",onClick:f},{default:N(()=>[P(u,{left:""},{default:N(()=>e[0]||(e[0]=[V("mdi-content-save")])),_:1}),e[1]||(e[1]=V(" Save Calibration "))]),_:1}),P(S,{color:"primary",onClick:A,loading:c.value,class:"mr-2"},{default:N(()=>[P(u,{left:""},{default:N(()=>e[2]||(e[2]=[V("mdi-folder-open")])),_:1}),e[3]||(e[3]=V(" Load Calibration Checkpoints "))]),_:1},8,["loading"])]),b.value?(l(),r("div",dn,T(b.value),1)):L("",!0),h.value.length>0||c.value?(l(),r("div",vn,[e[6]||(e[6]=o("h3",{class:"text-h6 mb-2"},"Available Device Calibration Checkpoints",-1)),h.value.length>0?(l(),r("div",pn,[P(p,null,{default:N(()=>[(l(!0),r(U,null,G(h.value,C=>(l(),Z(y,{key:C,onClick:E=>s(C),class:z({"config-item":!0,loading:_.value===C})},{default:N(()=>[P(u,{left:""},{default:N(()=>e[4]||(e[4]=[V("mdi-file-document")])),_:1}),V(" "+T(C)+" ",1),_.value===C?(l(),Z(u,{key:0,right:""},{default:N(()=>e[5]||(e[5]=[V("mdi-loading")])),_:1})):L("",!0)]),_:2},1032,["onClick","class"]))),128))]),_:1})])):c.value?L("",!0):(l(),r("div",fn,' Click "Refresh Configs" to load. '))])):L("",!0)])}}},gn=J(bn,[["__scopeId","data-v-ecd4ed1d"]]);const mn={key:0,class:"experiment-running-overlay"},_n={class:"calibration-switch-row"},yn={key:2},hn={__name:"DeviceControl",setup(d){const n=X(),{deviceConnected:t,deviceControlEnabled:h,calibrationModeEnabled:b,stirrers:c,pumps:_,valves:w,ods:A}=Y(n),$=K(()=>h.value),f=K({get:()=>b.value,set:e=>n.setCalibrationModeEnabled(e)}),{openDialog:s}=ge();async function v(){console.log("onReconnectClick"),await s({title:"Reconnect Device?",message:"Are you sure you want to reconnect the device?"})?(ne.success("Reconnecting device..."),n.connectDevice()):ne.error("Reconnect cancelled")}return ee(()=>{n.fetchDeviceData()}),(e,u)=>{const S=B("v-btn"),y=B("v-switch");return l(),r("div",{class:z(["DeviceControl",{"device-disconnected":k(t)===!1}])},[k(h)===!1?(l(),r("div",mn)):L("",!0),o("div",_n,[k(b)?(l(),Z(S,{key:0,class:"reconnect-btn",onClick:v},{default:N(()=>u[1]||(u[1]=[V("Reconnect Device")])),_:1})):L("",!0),P(y,{modelValue:f.value,"onUpdate:modelValue":u[0]||(u[0]=p=>f.value=p),label:"Calibration Mode"},null,8,["modelValue"])]),k(h)||$.value?(l(),r(U,{key:1},[P(Pt),P(Jt),P(ia),P(Ya),P(rn),k(b)?(l(),Z(gn,{key:0})):L("",!0)],64)):(l(),r("p",yn,"Device Control Disabled"))],2)}}},Sn=J(hn,[["__scopeId","data-v-12bbe645"]]);export{Sn as default};
