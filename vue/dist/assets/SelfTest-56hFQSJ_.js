import{_ as h,I as k,J as f,l as I,u as E,r as N,o as D,c as S,g as v,w as y,h as b,b as c}from"./index-VGsmnu5W.js";import{C as w,r as V}from"./chart--Mp3_Buo.js";w.register(...V);const B={__name:"StirrerTest",setup(O){const a=k(),d=f(()=>a.state.device.isFetchingCalibration),s=f(()=>a.state.device.stirrers.speed_profiles),l=I(null);let i=null;function u(t){const e=[],n=["rgba(255, 99, 132, 1)","rgba(54, 162, 235, 1)","rgba(255, 206, 86, 1)","rgba(75, 192, 192, 1)","rgba(153, 102, 255, 1)","rgba(255, 159, 64, 1)","rgba(201, 203, 207, 1)"];let o=0;for(const[m,_]of Object.entries(t)){const p=[];for(const[x,C]of Object.entries(_)){const P=parseFloat(x),T=C.map(Number),R=T.reduce((F,L)=>F+L,0)/T.length;p.push({x:P,y:R})}p.sort((x,C)=>x.x-C.x),e.push({label:`Stirrer ${m}`,data:p,borderColor:n[o%n.length],backgroundColor:n[o%n.length],fill:!1,tension:.1}),o++}i&&i.destroy(),l.value&&(i=new w(l.value,{type:"line",data:{datasets:e},options:{responsive:!0,scales:{x:{type:"linear",position:"bottom",min:0,max:1.02,title:{display:!0,text:"Duty Cycle"}},y:{min:0,max:1e4,title:{display:!0,text:"Revolutions per Minute"}}}}}))}const g=async()=>{console.log("Running stirrer calibration test..."),await a.dispatch("device/fetchStirrerCalibrationData"),console.log("Stirrer calibration test completed. Plotting data..."),await a.dispatch("device/getAllDeviceData"),s.value?u(s.value):console.error("No existing stirrer calibration data available in speed_profiles.")},r=async()=>{await a.dispatch("device/getAllDeviceData"),s.value?u(s.value):console.error("No existing stirrer calibration data available in speed_profiles.")};return E(s,t=>{t&&u(t)}),(t,e)=>{const n=N("v-btn");return D(),S("div",null,[v(n,{onClick:r},{default:y(()=>e[0]||(e[0]=[b(" Plot Existing Data ")])),_:1}),e[3]||(e[3]=c("br",null,null,-1)),e[4]||(e[4]=c("br",null,null,-1)),c("h2",null,[e[2]||(e[2]=b("Stirrer Speed Profiles ")),v(n,{onClick:g,disabled:d.value},{default:y(()=>e[1]||(e[1]=[b(" Remeasure (approx. 2 min) ")])),_:1},8,["disabled"])]),c("canvas",{ref_key:"chartCanvas",ref:l},null,512)])}}},j=h(B,[["__scopeId","data-v-f9e5c8ad"]]),A={__name:"ODTest",setup(O){const a=k(),d=f(()=>a.state.device.isFetchingCalibration),s=f(()=>a.state.device.ods.max_signal),l=I(null);let i=null;function u(r){const t=[],e={red:"rgba(255, 0, 0, 1)",green:"rgba(0, 255, 0, 1)",blue:"rgba(0, 0, 255, 1)",laser:"rgba(139, 0, 0, 1)"};[{key:"laser",label:"Laser (nominal power)"},{key:"red",label:"Red LED (max power)"},{key:"green",label:"Green LED (max power)"},{key:"blue",label:"Blue LED (max power)"}].forEach(({key:o,label:m})=>{if(r[o]){const _=Object.keys(r[o]).map(p=>({x:parseInt(p),y:r[o][p]}));t.push({label:m,data:_,backgroundColor:e[o],borderColor:e[o],borderWidth:1,type:"bar"})}}),i&&i.destroy(),l.value&&(i=new w(l.value,{type:"bar",data:{datasets:t},options:{responsive:!0,scales:{x:{type:"linear",position:"bottom",title:{display:!0,text:"Vial"}},y:{title:{display:!0,text:"Signal [mV]"}}}}}))}const g=async()=>{console.log("Running OD test..."),await a.dispatch("device/fetchODCalibrationData"),console.log("OD test completed. Plotting data..."),await a.dispatch("device/getAllDeviceData"),s.value?u(s.value):console.error("No OD signal data available.")};return E(s,r=>{r&&u(r)}),(r,t)=>{const e=N("v-btn");return D(),S("div",null,[c("h2",null,[t[1]||(t[1]=b(" Transmitted Light Intensity ")),v(e,{onClick:g,disabled:d.value},{default:y(()=>t[0]||(t[0]=[b(" Remeasure (approx. 5 sec) ")])),_:1},8,["disabled"])]),c("canvas",{ref_key:"chartCanvas",ref:l},null,512)])}}},$=h(A,[["__scopeId","data-v-93f0dc21"]]),M={__name:"SelfTest",setup(O){return(a,d)=>(D(),S("div",null,[d[0]||(d[0]=c("h1",null,"Self Test",-1)),v(j),v($)]))}},W=h(M,[["__scopeId","data-v-50a6ad7b"]]);export{W as default};
