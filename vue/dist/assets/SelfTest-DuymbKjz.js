import{_ as S,J as T,K as y,l as D,u as E,r as g,o as I,c as O,b as C,h as v,g as s,w as c,I as L}from"./index-DO46mX6s.js";import{C as R,r as j}from"./chart--Mp3_Buo.js";R.register(...j);const U={__name:"StirrerTest",setup(k,{expose:_}){const n=T(),h=y(()=>n.state.device.isFetchingCalibration),d=y(()=>n.state.device.stirrers.speed_profiles),u=D(null);let r=null;function e(a){r&&r.destroy();const t=[],o=["rgba(255, 99, 132, 1)","rgba(54, 162, 235, 1)","rgba(255, 206, 86, 1)","rgba(75, 192, 192, 1)","rgba(153, 102, 255, 1)","rgba(255, 159, 64, 1)","rgba(201, 203, 207, 1)"];let l=0;for(const[i,x]of Object.entries(a)){const b=[];for(const[p,w]of Object.entries(x)){const $=parseFloat(p),P=w.map(Number),N=P.reduce((B,F)=>B+F,0)/P.length;b.push({x:$,y:N})}b.sort((p,w)=>p.x-w.x),t.push({label:`Stirrer ${i}`,data:b,borderColor:o[l%o.length],backgroundColor:o[l%o.length],fill:!1,tension:.1}),l++}u.value&&(r=new R(u.value,{type:"line",data:{datasets:t},options:{responsive:!0,scales:{x:{type:"linear",position:"bottom",min:0,max:1.02,title:{display:!0,text:"Duty Cycle"}},y:{min:0,max:1e4,title:{display:!0,text:"Revolutions per Minute"}}}}}))}function m(){return r?r.toBase64Image():""}_({getChartImage:m});const f=async()=>{await n.dispatch("device/fetchStirrerCalibrationData"),await n.dispatch("device/getAllDeviceData"),d.value&&e(d.value)};return E(d,a=>{a&&e(a)}),(a,t)=>{const o=g("v-btn");return I(),O("div",null,[C("h2",null,[t[1]||(t[1]=v("Stirrer Speed Profiles ")),s(o,{onClick:f,disabled:h.value},{default:c(()=>t[0]||(t[0]=[v(" Remeasure (approx. 2 min) ")])),_:1},8,["disabled"])]),C("canvas",{ref_key:"chartCanvas",ref:u},null,512)])}}},V=S(U,[["__scopeId","data-v-3dde2bfa"]]),A={__name:"ODTest",setup(k,{expose:_}){const n=T(),h=y(()=>n.state.device.isFetchingCalibration),d=y(()=>n.state.device.ods.max_signal),u=D(null);let r=null;function e(a){const t=[],o={red:"rgba(255, 0, 0, 1)",green:"rgba(0, 255, 0, 1)",blue:"rgba(0, 0, 255, 1)",laser:"rgba(139, 0, 0, 1)"};[{key:"laser",label:"Laser (nominal power)"},{key:"red",label:"Red LED (max power)"},{key:"green",label:"Green LED (max power)"},{key:"blue",label:"Blue LED (max power)"}].forEach(({key:i,label:x})=>{if(a[i]){const b=Object.keys(a[i]).map(p=>({x:parseInt(p,10),y:a[i][p]}));t.push({label:x,data:b,backgroundColor:o[i],borderColor:o[i],borderWidth:1,type:"bar"})}}),r&&r.destroy(),u.value&&(r=new R(u.value,{type:"bar",data:{datasets:t},options:{responsive:!0,scales:{x:{type:"linear",position:"bottom",title:{display:!0,text:"Vial"}},y:{title:{display:!0,text:"Signal [mV]"}}}}}))}function m(){return r?r.toBase64Image():""}_({getChartImage:m});async function f(){console.log("Running OD test..."),await n.dispatch("device/fetchODCalibrationData"),console.log("OD test completed. Plotting data..."),await n.dispatch("device/getAllDeviceData"),d.value?e(d.value):console.error("No OD signal data available.")}return E(d,a=>{a&&e(a)}),(a,t)=>{const o=g("v-btn");return I(),O("div",null,[C("h2",null,[t[1]||(t[1]=v(" Transmitted Light Intensity ")),s(o,{onClick:f,disabled:h.value},{default:c(()=>t[0]||(t[0]=[v(" Remeasure (approx. 5 sec) ")])),_:1},8,["disabled"])]),C("canvas",{ref_key:"chartCanvas",ref:u},null,512)])}}},M=S(A,[["__scopeId","data-v-3f8e6b86"]]),H={__name:"SelfTest",setup(k){const _=T(),n=D(null),h=D(null),d=async()=>{await _.dispatch("device/getAllDeviceData")};function u(){var x,b,p;const r=((x=n.value)==null?void 0:x.getChartImage())||"",e=((b=h.value)==null?void 0:b.getChartImage())||"";if((p=cameraRef.value)!=null&&p.getCameraMedia(),!r||!e){alert("Please run all tests before exporting.");return}const m=`
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Self Test Report</title>
</head>
<body>
  <h1>Self Test Report</h1>

  <h2>Stirrer Speed Profiles</h2>
  ${r?`<img src="${r}" alt="Stirrer Chart" style="max-width: 100%;" />`:"<p>No stirrer chart available</p>"}

  <h2>Transmitted Light Intensity</h2>
  ${e?`<img src="${e}" alt="OD Chart" style="max-width: 100%;" />`:"<p>No OD chart available</p>"}

  <p>Exported from the interactive dashboard</p>
</body>
</html>
  `,f=_.state.hostname||"device",a=new Date().toISOString().split("T")[0],t=`${f}-self-test-report-${a}.html`,o=new Blob([m],{type:"text/html"}),l=URL.createObjectURL(o),i=document.createElement("a");i.href=l,i.download=t,i.click(),URL.revokeObjectURL(l)}return(r,e)=>{const m=g("v-icon"),f=g("v-btn"),a=g("v-tooltip"),t=g("v-col"),o=g("v-row");return I(),O("div",null,[s(o,null,{default:c(()=>[s(t,null,{default:c(()=>[s(a,{text:"Plot test data stored on device"},{activator:c(({props:l})=>[s(f,L(l,{onClick:d}),{default:c(()=>[s(m,null,{default:c(()=>e[0]||(e[0]=[v("mdi-chart-line")])),_:1}),e[1]||(e[1]=v("Plot Self-Test Data "))]),_:2},1040)]),_:1})]),_:1}),s(t,null,{default:c(()=>[s(a,{text:"Export the current page as an HTML file"},{activator:c(({props:l})=>[s(f,L(l,{onClick:u}),{default:c(()=>[s(m,null,{default:c(()=>e[2]||(e[2]=[v("mdi-file-download")])),_:1}),e[3]||(e[3]=v(" Download Self-Test Report "))]),_:2},1040)]),_:1})]),_:1})]),_:1}),e[4]||(e[4]=C("br",null,null,-1)),s(V,{ref_key:"stirrerRef",ref:n},null,512),s(M,{ref_key:"odRef",ref:h},null,512)])}}},K=S(H,[["__scopeId","data-v-55a39300"]]);export{K as default};
